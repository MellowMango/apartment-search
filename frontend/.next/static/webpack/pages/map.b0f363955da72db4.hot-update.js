"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/map",{

/***/ "./lib/geocoding.js":
/*!**************************!*\
  !*** ./lib/geocoding.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkResearchTableExists: function() { return /* binding */ checkResearchTableExists; },\n/* harmony export */   enhancedGeocodeProperties: function() { return /* binding */ enhancedGeocodeProperties; },\n/* harmony export */   geocodeAddress: function() { return /* binding */ geocodeAddress; },\n/* harmony export */   geocodeProperties: function() { return /* binding */ geocodeProperties; },\n/* harmony export */   isGridPattern: function() { return /* binding */ isGridPattern; },\n/* harmony export */   syncResearchCoordinates: function() { return /* binding */ syncResearchCoordinates; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"./lib/supabase.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../../../node_modules/process/browser.js\");\n/**\n * Geocoding utilities for the frontend\n * \n * This module provides tools for:\n * 1. Client-side geocoding using Google Maps, Mapbox, or Nominatim (fallback)\n * 2. Utilities for coordinate validation and processing\n * 3. Functions to synchronize coordinates between properties and property_research\n */ \n/**\n * Geocode a batch of properties\n * \n * @param {Array} properties - Array of property objects\n * @returns {Promise<Array>} - Properties with coordinates added\n */ async function geocodeProperties(properties) {\n    // Filter properties that need geocoding\n    const needsGeocoding = properties.filter((p)=>(p._needs_geocoding || !p.latitude || !p.longitude || p._coordinates_missing || p._is_grid_pattern) && (p.address || p.city && p.state));\n    if (needsGeocoding.length === 0) {\n        console.log(\"No properties need geocoding\");\n        return properties;\n    }\n    console.log(\"Geocoding \".concat(needsGeocoding.length, \" properties\"));\n    // Try to use Google Maps API if available\n    const googleMapsAvailable = typeof google !== \"undefined\" && google.maps && google.maps.Geocoder;\n    // Use Mapbox if available\n    const mapboxToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n    // Geocode each property\n    const geocodedProperties = await Promise.all(properties.map(async (property)=>{\n        // Skip properties that don't need geocoding\n        if (!property._needs_geocoding && property.latitude && property.longitude && !property._coordinates_missing && !property._is_grid_pattern || !property.address && (!property.city || !property.state)) {\n            return property;\n        }\n        // Create a copy to avoid mutating the original\n        const geocodedProperty = {\n            ...property\n        };\n        try {\n            let coordinates = null;\n            // Try Google Maps API first if available\n            if (googleMapsAvailable) {\n                coordinates = await geocodeWithGoogleMaps(property);\n            }\n            // If Google Maps failed or is not available, try Mapbox\n            if (!coordinates && mapboxToken) {\n                coordinates = await geocodeWithMapbox(property, mapboxToken);\n            }\n            // If both failed, try Nominatim as a last resort\n            if (!coordinates) {\n                coordinates = await geocodeWithNominatim(property);\n            }\n            // If we got coordinates, update the property\n            if (coordinates) {\n                geocodedProperty.latitude = coordinates.latitude;\n                geocodedProperty.longitude = coordinates.longitude;\n                geocodedProperty._geocoded = true;\n                geocodedProperty._coordinates_missing = false;\n                geocodedProperty._needs_geocoding = false;\n                geocodedProperty._is_grid_pattern = false;\n                console.log(\"Geocoded \".concat(property.address || property.city, \", \").concat(property.state, \": \").concat(coordinates.latitude, \", \").concat(coordinates.longitude));\n            } else {\n                console.warn(\"Failed to geocode \".concat(property.address || property.city, \", \").concat(property.state));\n            }\n        } catch (error) {\n            console.error(\"Geocoding error for \".concat(property.address || property.city, \", \").concat(property.state, \":\"), error);\n        }\n        return geocodedProperty;\n    }));\n    return geocodedProperties;\n}\n/**\n * Geocode a property using Google Maps API\n * \n * @param {Object} property - Property object with address information\n * @returns {Promise<Object|null>} - Coordinates object or null if failed\n */ async function geocodeWithGoogleMaps(property) {\n    return new Promise((resolve)=>{\n        try {\n            const geocoder = new google.maps.Geocoder();\n            // Build address string\n            let addressString = \"\";\n            if (property.address) addressString += property.address;\n            if (property.city) addressString += (addressString ? \", \" : \"\") + property.city;\n            if (property.state) addressString += (addressString ? \", \" : \"\") + property.state;\n            if (property.zip_code) addressString += (addressString ? \" \" : \"\") + property.zip_code;\n            geocoder.geocode({\n                address: addressString\n            }, (results, status)=>{\n                if (status === \"OK\" && results[0] && results[0].geometry) {\n                    const latitude = results[0].geometry.location.lat();\n                    const longitude = results[0].geometry.location.lng();\n                    // Check for suspicious patterns\n                    if (isGridPattern(latitude, longitude)) {\n                        console.warn(\"Suspicious grid pattern detected: \".concat(latitude, \", \").concat(longitude));\n                        resolve(null);\n                    } else {\n                        resolve({\n                            latitude,\n                            longitude,\n                            provider: \"google\"\n                        });\n                    }\n                } else {\n                    console.warn(\"Google geocoding failed: \".concat(status));\n                    resolve(null);\n                }\n            });\n        } catch (error) {\n            console.error(\"Error with Google geocoding:\", error);\n            resolve(null);\n        }\n    });\n}\n/**\n * Geocode a property using Mapbox API\n * \n * @param {Object} property - Property object with address information\n * @param {string} accessToken - Mapbox access token\n * @returns {Promise<Object|null>} - Coordinates object or null if failed\n */ async function geocodeWithMapbox(property, accessToken) {\n    try {\n        // Build address string\n        let addressString = \"\";\n        if (property.address) addressString += property.address;\n        if (property.city) addressString += (addressString ? \", \" : \"\") + property.city;\n        if (property.state) addressString += (addressString ? \", \" : \"\") + property.state;\n        if (property.zip_code) addressString += (addressString ? \" \" : \"\") + property.zip_code;\n        // URL encode the address\n        const encodedAddress = encodeURIComponent(addressString);\n        // Make API request\n        const response = await fetch(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(encodedAddress, \".json?access_token=\").concat(accessToken));\n        if (!response.ok) {\n            throw new Error(\"Mapbox API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const data = await response.json();\n        if (data.features && data.features.length > 0) {\n            const feature = data.features[0];\n            const longitude = feature.center[0];\n            const latitude = feature.center[1];\n            // Check for suspicious patterns\n            if (isGridPattern(latitude, longitude)) {\n                console.warn(\"Suspicious grid pattern detected: \".concat(latitude, \", \").concat(longitude));\n                return null;\n            }\n            return {\n                latitude,\n                longitude,\n                provider: \"mapbox\"\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error with Mapbox geocoding:\", error);\n        return null;\n    }\n}\n/**\n * Geocode a property using Nominatim API (OpenStreetMap)\n * \n * @param {Object} property - Property object with address information\n * @returns {Promise<Object|null>} - Coordinates object or null if failed\n */ async function geocodeWithNominatim(property) {\n    try {\n        // Build address string\n        let addressString = \"\";\n        if (property.address) addressString += property.address;\n        if (property.city) addressString += (addressString ? \", \" : \"\") + property.city;\n        if (property.state) addressString += (addressString ? \", \" : \"\") + property.state;\n        if (property.zip_code) addressString += (addressString ? \" \" : \"\") + property.zip_code;\n        // URL encode the address\n        const encodedAddress = encodeURIComponent(addressString);\n        // Make API request (with a random delay to avoid rate limiting)\n        const response = await fetch(\"https://nominatim.openstreetmap.org/search?format=json&q=\".concat(encodedAddress), {\n            headers: {\n                \"User-Agent\": \"AcquirePropertyMap/1.0\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Nominatim API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const data = await response.json();\n        if (data && data.length > 0) {\n            const result = data[0];\n            const latitude = parseFloat(result.lat);\n            const longitude = parseFloat(result.lon);\n            // Check for suspicious patterns\n            if (isGridPattern(latitude, longitude)) {\n                console.warn(\"Suspicious grid pattern detected: \".concat(latitude, \", \").concat(longitude));\n                return null;\n            }\n            return {\n                latitude,\n                longitude,\n                provider: \"nominatim\"\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error with Nominatim geocoding:\", error);\n        return null;\n    }\n}\n/**\n * Check if coordinates are likely part of a grid pattern\n * \n * @param {number} latitude - Latitude coordinate\n * @param {number} longitude - Longitude coordinate\n * @returns {boolean} - True if likely a grid pattern, false otherwise\n */ function isGridPattern(latitude, longitude) {\n    if (!latitude || !longitude) return false;\n    // Convert to strings for easier checking\n    const latStr = String(latitude);\n    const lngStr = String(longitude);\n    // Check for very low precision coordinates (often grid patterns)\n    const hasLowPrecision = latStr.includes(\".\") && latStr.split(\".\")[1].length <= 3 || lngStr.includes(\".\") && lngStr.split(\".\")[1].length <= 3;\n    // Check for suspicious patterns\n    const hasSuspiciousPattern = latStr === lngStr || // Same lat/lng is very unlikely\n    latStr.endsWith(\"00000\") || lngStr.endsWith(\"00000\") || latStr.endsWith(\".5\") || // Common grid values\n    lngStr.endsWith(\".5\") || latStr.endsWith(\".0\") || lngStr.endsWith(\".0\");\n    return hasLowPrecision || hasSuspiciousPattern;\n}\n/**\n * Check if the property_research table exists in Supabase\n * \n * @returns {Promise<boolean>} - True if table exists, false otherwise\n */ async function checkResearchTableExists() {\n    try {\n        // Attempt to query the table\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"property_research\").select(\"id\").limit(1);\n        // If no error, table exists\n        return !error;\n    } catch (error) {\n        console.error(\"Error checking research table:\", error);\n        return false;\n    }\n}\n/**\n * Synchronize coordinates between properties and property_research tables\n * \n * @param {number} limit - Maximum number of properties to process\n * @returns {Promise<Object>} - Result object with success status and counts\n */ async function syncResearchCoordinates() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100;\n    try {\n        // Check if table exists\n        const tableExists = await checkResearchTableExists();\n        if (!tableExists) {\n            return {\n                success: false,\n                message: \"Property research table does not exist or is not accessible\",\n                updated: 0,\n                errors: 0\n            };\n        }\n        // Get properties missing or with suspicious coordinates\n        const { data: properties, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"properties\").select(\"id, address, city, state, zip_code, latitude, longitude\").limit(limit);\n        if (error) {\n            throw new Error(\"Error fetching properties: \".concat(error.message));\n        }\n        if (!properties || properties.length === 0) {\n            return {\n                success: true,\n                message: \"No properties found to synchronize\",\n                updated: 0,\n                errors: 0\n            };\n        }\n        // Synchronize each property\n        let updated = 0;\n        let errors = 0;\n        for (const property of properties){\n            try {\n                // If property has valid coordinates, update property_research\n                if (property.latitude && property.longitude && !isGridPattern(property.latitude, property.longitude)) {\n                    // Get property_research record\n                    const { data: research, error: researchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"property_research\").select(\"id, modules\").eq(\"property_id\", property.id);\n                    if (researchError) {\n                        console.error(\"Error fetching research for property \".concat(property.id, \":\"), researchError);\n                        errors++;\n                        continue;\n                    }\n                    if (research && research.length > 0) {\n                        // Update modules with coordinates\n                        const researchRecord = research[0];\n                        let modules = researchRecord.modules || {};\n                        // Create property_details if it doesn't exist\n                        if (!modules.property_details) {\n                            modules.property_details = {};\n                        }\n                        // Update coordinates\n                        modules.property_details.latitude = property.latitude;\n                        modules.property_details.longitude = property.longitude;\n                        modules.property_details.address = property.address;\n                        modules.property_details.city = property.city;\n                        modules.property_details.state = property.state;\n                        modules.property_details.zip_code = property.zip_code;\n                        // Update property_research\n                        const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"property_research\").update({\n                            modules\n                        }).eq(\"id\", researchRecord.id);\n                        if (updateError) {\n                            console.error(\"Error updating research for property \".concat(property.id, \":\"), updateError);\n                            errors++;\n                        } else {\n                            updated++;\n                        }\n                    }\n                }\n            } catch (propertyError) {\n                console.error(\"Error processing property \".concat(property.id, \":\"), propertyError);\n                errors++;\n            }\n        }\n        return {\n            success: true,\n            message: \"Synchronized \".concat(updated, \" properties with \").concat(errors, \" errors\"),\n            updated,\n            errors\n        };\n    } catch (error) {\n        console.error(\"Error in syncResearchCoordinates:\", error);\n        return {\n            success: false,\n            message: error.message || \"Unknown error occurred\",\n            updated: 0,\n            errors: 1\n        };\n    }\n}\n/**\n * Enhanced batch geocoding function that attempts multiple methods of geocoding\n * @param {Array} properties Array of properties to geocode\n * @param {Function} progressCallback Optional callback function (property, status, details) => {}\n * @returns {Array} Updated properties with geocoding results\n */ async function enhancedGeocodeProperties(properties) {\n    let progressCallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    if (!Array.isArray(properties) || properties.length === 0) {\n        return [];\n    }\n    // Create a deep copy of the properties to avoid mutating the originals\n    const propertiesCopy = JSON.parse(JSON.stringify(properties));\n    // Process each property\n    for(let i = 0; i < propertiesCopy.length; i++){\n        const property = propertiesCopy[i];\n        try {\n            // Skip properties that already have valid coordinates\n            if (property.latitude && property.longitude && property.latitude !== 0 && property.longitude !== 0 && !property._needs_geocoding && !property._coordinates_missing && !property._is_grid_pattern) {\n                // Mark as having existing valid coordinates\n                property._geocoding_source = \"existing\";\n                property._geocoded = true;\n                if (progressCallback) {\n                    progressCallback(property, \"skipped\", \"already has valid coordinates\");\n                }\n                continue;\n            }\n            if (progressCallback) {\n                progressCallback(property, \"processing\", \"starting geocoding process\");\n            }\n            // First, try geocoding with verified address if available\n            if (property.verified_address) {\n                if (progressCallback) {\n                    progressCallback(property, \"attempt\", \"using verified address\");\n                }\n                const geocodeResult = await geocodeAddress(property.verified_address);\n                if (geocodeResult.success) {\n                    property.latitude = geocodeResult.lat;\n                    property.longitude = geocodeResult.lng;\n                    property._geocoding_source = \"verified_address\";\n                    property._geocoded = true;\n                    property._needs_geocoding = false;\n                    property._is_grid_pattern = false;\n                    property._coordinates_missing = false;\n                    property.geocoded_at = new Date().toISOString();\n                    if (progressCallback) {\n                        progressCallback(property, \"success\", \"verified address geocoded\");\n                    }\n                    continue;\n                }\n            }\n            // Next, try with the full address\n            if (property.address) {\n                let fullAddress = property.address;\n                // Add city, state if they exist and aren't already in the address\n                if (property.city && !fullAddress.includes(property.city)) {\n                    fullAddress += \", \".concat(property.city);\n                }\n                if (property.state && !fullAddress.includes(property.state)) {\n                    fullAddress += \", \".concat(property.state);\n                }\n                // Add zip code if available and not already in the address\n                if (property.zip && !fullAddress.includes(property.zip)) {\n                    fullAddress += \" \".concat(property.zip);\n                }\n                if (progressCallback) {\n                    progressCallback(property, \"attempt\", \"using full address\");\n                }\n                const geocodeResult = await geocodeAddress(fullAddress);\n                if (geocodeResult.success) {\n                    property.latitude = geocodeResult.lat;\n                    property.longitude = geocodeResult.lng;\n                    property._geocoding_source = \"full_address\";\n                    property._geocoded = true;\n                    property._needs_geocoding = false;\n                    property._is_grid_pattern = false;\n                    property._coordinates_missing = false;\n                    property.geocoded_at = new Date().toISOString();\n                    if (progressCallback) {\n                        progressCallback(property, \"success\", \"full address geocoded\");\n                    }\n                    continue;\n                }\n            }\n            // If all else fails, try geocoding based on the property name\n            // This is a last resort and might not be accurate\n            if (property.name) {\n                // Format the name for geocoding\n                // Add \"Austin, TX\" since most properties are in Austin\n                const searchTerm = \"\".concat(property.name, \", \").concat(property.city || \"Austin\", \", \").concat(property.state || \"TX\");\n                if (progressCallback) {\n                    progressCallback(property, \"attempt\", \"using property name as last resort\");\n                }\n                const geocodeResult = await geocodeAddress(searchTerm);\n                if (geocodeResult.success) {\n                    property.latitude = geocodeResult.lat;\n                    property.longitude = geocodeResult.lng;\n                    property._geocoding_source = \"property_name\";\n                    property._geocoded = true;\n                    property._needs_geocoding = false;\n                    // Still mark these as potentially grid pattern since they're less reliable\n                    property._is_grid_pattern = false;\n                    property._coordinates_missing = false;\n                    property.geocoded_at = new Date().toISOString();\n                    if (progressCallback) {\n                        progressCallback(property, \"success\", \"property name geocoded (less accurate)\");\n                    }\n                    continue;\n                }\n            }\n            // If we get here, all geocoding attempts failed\n            property._geocoding_failed = true;\n            if (progressCallback) {\n                progressCallback(property, \"error\", \"all geocoding methods failed\");\n            }\n        } catch (error) {\n            console.error(\"Error geocoding property \".concat(property.id, \":\"), error);\n            property._geocoding_failed = true;\n            if (progressCallback) {\n                progressCallback(property, \"error\", error.message);\n            }\n        }\n    }\n    return propertiesCopy;\n}\n/**\n * Helper function to check if a property has valid coordinates\n */ const hasValidCoordinates = (property)=>{\n    if (!property) return false;\n    if (!property.latitude || !property.longitude) return false;\n    // Convert to numbers if needed\n    const lat = typeof property.latitude === \"number\" ? property.latitude : parseFloat(String(property.latitude));\n    const lng = typeof property.longitude === \"number\" ? property.longitude : parseFloat(String(property.longitude));\n    // Check for NaN\n    if (isNaN(lat) || isNaN(lng)) return false;\n    // Check for zero values (often default)\n    if (lat === 0 && lng === 0) return false;\n    // Check for reasonable coordinate ranges\n    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) return false;\n    return true;\n};\n/**\n * Geocode an address using Google Maps API\n * @param {string} address The address to geocode\n * @returns {Promise<Object>} Object with success flag and lat/lng if successful\n */ async function geocodeAddress(address) {\n    if (!address) {\n        return {\n            success: false,\n            error: \"No address provided\"\n        };\n    }\n    try {\n        // First try to use the geocoding API endpoint\n        const encodedAddress = encodeURIComponent(address);\n        const response = await fetch(\"/api/geocode?address=\".concat(encodedAddress));\n        if (!response.ok) {\n            throw new Error(\"API error: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data && data.results && data.results.length > 0) {\n            const location = data.results[0].geometry.location;\n            return {\n                success: true,\n                lat: location.lat,\n                lng: location.lng,\n                formattedAddress: data.results[0].formatted_address\n            };\n        }\n        return {\n            success: false,\n            error: \"No results found\"\n        };\n    } catch (error) {\n        console.error(\"Error geocoding address:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/geocoding.js\n"));

/***/ })

});