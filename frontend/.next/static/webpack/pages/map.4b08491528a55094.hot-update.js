"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/map",{

/***/ "./pages/map.js":
/*!**********************!*\
  !*** ./pages/map.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MapPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _src_components_Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/components/Layout */ \"./src/components/Layout.tsx\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/supabase */ \"./lib/supabase.js\");\n/* harmony import */ var _lib_geocoding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/geocoding */ \"./lib/geocoding.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n// Import the map component dynamically to avoid SSR issues with Leaflet\nconst MapComponent = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(()=>__webpack_require__.e(/*! import() */ \"src_components_MapComponent_tsx\").then(__webpack_require__.bind(__webpack_require__, /*! ../src/components/MapComponent */ \"./src/components/MapComponent.tsx\")), {\n    loadableGenerated: {\n        modules: [\n            \"map.js -> \" + \"../src/components/MapComponent\"\n        ]\n    },\n    ssr: false\n});\n_c = MapComponent;\nfunction MapPage() {\n    _s();\n    const [properties, setProperties] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedProperty, setSelectedProperty] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [geocoding, setGeocoding] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [geocodingLogs, setGeocodingLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [showGeocodingLogs, setShowGeocodingLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [mapBounds, setMapBounds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [totalFetched, setTotalFetched] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [dataStats, setDataStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalProperties: 0,\n        invalidCoordinates: 0,\n        missingCoordinates: 0,\n        zeroCoordinates: 0,\n        invalidRange: 0,\n        duplicatedLocations: 0\n    });\n    // Initial property load on page load\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        loadProperties();\n    }, []);\n    // Reload properties when map bounds change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (mapBounds) {\n            console.log(\"Map bounds changed, loading properties in the visible area\");\n            loadProperties(mapBounds);\n        }\n    }, [\n        mapBounds\n    ]);\n    // Handle map bounds changes\n    const handleBoundsChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((bounds)=>{\n        setMapBounds(bounds);\n    }, []);\n    // Calculate statistics about the property data\n    const calculateStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((propData)=>{\n        if (!propData || !Array.isArray(propData)) return;\n        const missingCoords = propData.filter((p)=>!p.latitude || !p.longitude).length;\n        const zeroCoords = propData.filter((p)=>p.latitude === 0 && p.longitude === 0).length;\n        const invalidRange = propData.filter((p)=>{\n            if (!p.latitude || !p.longitude) return false;\n            const lat = typeof p.latitude === \"number\" ? p.latitude : parseFloat(String(p.latitude));\n            const lng = typeof p.longitude === \"number\" ? p.longitude : parseFloat(String(p.longitude));\n            return isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180;\n        }).length;\n        // Count properties at identical coordinates\n        const coordMap = new Map();\n        let duplicatedCoords = 0;\n        propData.forEach((p)=>{\n            if (p.latitude && p.longitude) {\n                const coordKey = \"\".concat(p.latitude, \",\").concat(p.longitude);\n                if (coordMap.has(coordKey)) {\n                    coordMap.set(coordKey, coordMap.get(coordKey) + 1);\n                    duplicatedCoords++;\n                } else {\n                    coordMap.set(coordKey, 1);\n                }\n            }\n        });\n        setDataStats({\n            totalProperties: propData.length,\n            invalidCoordinates: missingCoords + zeroCoords + invalidRange,\n            missingCoordinates: missingCoords,\n            zeroCoordinates: zeroCoords,\n            invalidRange: invalidRange,\n            duplicatedLocations: duplicatedCoords,\n            uniqueLocations: coordMap.size\n        });\n    }, []);\n    // Function to load properties with optional bounds filter\n    async function loadProperties() {\n        let bounds = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        try {\n            setLoading(true);\n            const options = {\n                sortBy: \"created_at\",\n                sortAsc: false,\n                page: 1,\n                pageSize: 1000,\n                filters: {},\n                includeIncomplete: true,\n                includeResearch: true,\n                noLimit: true // Bypass pagination to get all properties\n            };\n            // Apply bounds filter if provided\n            if (bounds) {\n                options.bounds = bounds;\n            }\n            const data = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_4__.fetchProperties)(options);\n            // Calculate statistics\n            calculateStats(data);\n            // Enhanced logging for debugging\n            console.log(\"===== MAP DEBUG =====\");\n            console.log(\"Loaded \".concat(data.length, \" properties for map\"));\n            // Check coordinate validity\n            const validCoords = data.filter((p)=>p.latitude && p.longitude && typeof p.latitude === \"number\" && typeof p.longitude === \"number\" && !(p.latitude === 0 && p.longitude === 0));\n            console.log(\"Properties with valid coordinates: \".concat(validCoords.length));\n            // Check Austin area coordinates\n            const austinCoords = validCoords.filter((p)=>p.latitude >= 29.5 && p.latitude <= 31.0 && p.longitude >= -98.0 && p.longitude <= -97.0);\n            console.log(\"Properties with coordinates in Austin area: \".concat(austinCoords.length));\n            // Look for suspicious patterns\n            const suspiciousCoords = validCoords.filter((p)=>{\n                const latStr = String(p.latitude);\n                const lngStr = String(p.longitude);\n                const hasLowPrecision = latStr.includes(\".\") && latStr.split(\".\")[1].length <= 1 || lngStr.includes(\".\") && lngStr.split(\".\")[1].length <= 1;\n                const hasSuspiciousPattern = latStr === lngStr || latStr.endsWith(\"00000\") || lngStr.endsWith(\"00000\");\n                return hasLowPrecision || hasSuspiciousPattern;\n            });\n            console.log(\"Properties with suspicious coordinates: \".concat(suspiciousCoords.length));\n            console.log(\"===== END DEBUG =====\");\n            setProperties(data);\n            setTotalFetched(data.length);\n        } catch (error) {\n            console.error(\"Error fetching properties:\", error);\n        } finally{\n            setLoading(false);\n        }\n    }\n    // Function to batch geocode properties with missing coordinates\n    async function batchGeocodeProperties() {\n        try {\n            setGeocoding(true);\n            // Filter properties that need geocoding\n            const propsToGeocode = properties.filter((p)=>!p.latitude || !p.longitude || p.latitude === 0 || p.longitude === 0 || p._coordinates_missing || p._needs_geocoding || p._is_grid_pattern);\n            if (propsToGeocode.length === 0) {\n                alert(\"No properties need geocoding\");\n                setGeocoding(false);\n                return;\n            }\n            // Confirm with user\n            if (!confirm(\"This will attempt to geocode \".concat(propsToGeocode.length, \" properties with missing or invalid coordinates. Continue?\"))) {\n                setGeocoding(false);\n                return;\n            }\n            // Process in batches of 25 to avoid rate limits\n            const batchSize = 25;\n            const batches = Math.ceil(propsToGeocode.length / batchSize);\n            let successCount = 0;\n            let failCount = 0;\n            for(let i = 0; i < batches; i++){\n                const start = i * batchSize;\n                const end = Math.min(start + batchSize, propsToGeocode.length);\n                const batch = propsToGeocode.slice(start, end);\n                console.log(\"Processing batch \".concat(i + 1, \"/\").concat(batches, \" (\").concat(batch.length, \" properties)\"));\n                try {\n                    const geocodedBatch = await (0,_lib_geocoding__WEBPACK_IMPORTED_MODULE_5__.enhancedGeocodeProperties)(batch);\n                    // Count successes and failures\n                    const batchSuccess = geocodedBatch.filter((p)=>p._geocoded).length;\n                    const batchFail = geocodedBatch.filter((p)=>p._geocoding_failed).length;\n                    successCount += batchSuccess;\n                    failCount += batchFail;\n                    // Merge geocoded properties back into the main array\n                    const updatedProperties = [\n                        ...properties\n                    ];\n                    geocodedBatch.forEach((geocodedProp)=>{\n                        const index = updatedProperties.findIndex((p)=>p.id === geocodedProp.id);\n                        if (index !== -1) {\n                            updatedProperties[index] = geocodedProp;\n                        }\n                    });\n                    // Update the properties state\n                    setProperties(updatedProperties);\n                    calculateStats(updatedProperties);\n                    // Wait a bit between batches to avoid rate limits\n                    if (i < batches - 1) {\n                        await new Promise((resolve)=>setTimeout(resolve, 2000));\n                    }\n                } catch (error) {\n                    console.error(\"Error geocoding batch \".concat(i + 1, \":\"), error);\n                    failCount += batch.length;\n                }\n            }\n            alert(\"Geocoding complete:\\n\\n\".concat(successCount, \" properties successfully geocoded\\n\").concat(failCount, \" properties failed to geocode\"));\n        } catch (error) {\n            console.error(\"Error in batch geocoding:\", error);\n            alert(\"Error geocoding properties: \".concat(error.message));\n        } finally{\n            setGeocoding(false);\n        }\n    }\n    function runPropertyAnalysis() {\n        // Count properties at identical coordinates\n        const coordMap = new Map();\n        let duplicatedCoords = 0;\n        properties.forEach((p)=>{\n            if (p.latitude && p.longitude) {\n                const coordKey = \"\".concat(p.latitude, \",\").concat(p.longitude);\n                if (coordMap.has(coordKey)) {\n                    coordMap.set(coordKey, coordMap.get(coordKey) + 1);\n                    duplicatedCoords++;\n                } else {\n                    coordMap.set(coordKey, 1);\n                }\n            }\n        });\n        // Find coordinates with multiple properties\n        const multiplePropsLocations = Array.from(coordMap.entries()).filter((param)=>{\n            let [_, count] = param;\n            return count > 1;\n        }).sort((a, b)=>b[1] - a[1]); // Sort by count descending\n        const multiplePropsCount = multiplePropsLocations.reduce((sum, param)=>{\n            let [_, count] = param;\n            return sum + count;\n        }, 0);\n        const uniqueLocations = coordMap.size;\n        // Count by geocoding source if available\n        const bySource = {\n            existing: properties.filter((p)=>p._geocoding_source === \"existing\").length,\n            verified_address: properties.filter((p)=>p._geocoding_source === \"verified_address\").length,\n            full_address: properties.filter((p)=>p._geocoding_source === \"full_address\").length,\n            property_name: properties.filter((p)=>p._geocoding_source === \"property_name\").length,\n            unknown: properties.filter((p)=>p.latitude && p.longitude && !p._geocoding_source).length\n        };\n        alert(\"Map Properties Analysis:\\n\\n\" + \"- Total properties: \".concat(properties.length, \"\\n\") + \"- Properties with invalid coordinates: \".concat(dataStats.invalidCoordinates, \"\\n\") + \"   • Missing coordinates: \".concat(dataStats.missingCoordinates, \"\\n\") + \"   • Zero coordinates: \".concat(dataStats.zeroCoordinates, \"\\n\") + \"   • Invalid coordinate range: \".concat(dataStats.invalidRange, \"\\n\\n\") + \"- Unique locations on map: \".concat(uniqueLocations, \"\\n\") + \"- Properties sharing exact coordinates: \".concat(duplicatedCoords, \"\\n\") + \"- Number of shared locations: \".concat(multiplePropsLocations.length, \"\\n\\n\") + (multiplePropsLocations.length > 0 ? \"Top shared locations:\\n\" + multiplePropsLocations.slice(0, 5).map((param)=>{\n            let [coords, count] = param;\n            return \"   • \".concat(count, \" properties at \").concat(coords);\n        }).join(\"\\n\") : \"\") + \"\\n\\n\" + \"Geocoding sources:\\n\" + \"   • Existing valid: \".concat(bySource.existing, \"\\n\") + \"   • Verified address: \".concat(bySource.verified_address, \"\\n\") + \"   • Full address: \".concat(bySource.full_address, \"\\n\") + \"   • Property name: \".concat(bySource.property_name, \"\\n\") + \"   • Unknown source: \".concat(bySource.unknown, \"\\n\\n\") + \"Note: Properties at identical coordinates will appear as a single marker until clicked.\");\n    }\n    // Function to clean property data\n    async function cleanPropertyData() {\n        try {\n            // Start the cleaning process\n            setLoading(true);\n            // First, analyze the data to identify issues\n            const dataIssues = {\n                missingNames: properties.filter((p)=>!p.name || p.name.trim() === \"\").length,\n                incompleteAddresses: properties.filter((p)=>p.address && (!p.city || !p.state)).length,\n                suspiciousZeros: properties.filter((p)=>p.price === 0 || p.units === 0 || p.num_units === 0).length,\n                suspiciousCoordinates: properties.filter((p)=>{\n                    // Check for suspicious patterns in coordinates\n                    if (!p.latitude || !p.longitude) return false;\n                    const latStr = String(p.latitude);\n                    const lngStr = String(p.longitude);\n                    // Check for very low precision or suspicious patterns\n                    return latStr.includes(\".\") && latStr.split(\".\")[1].length <= 2 || lngStr.includes(\".\") && lngStr.split(\".\")[1].length <= 2 || latStr === lngStr || // Same lat/lng is suspicious\n                    latStr.endsWith(\"00000\") || lngStr.endsWith(\"00000\") || latStr.endsWith(\".0\") || lngStr.endsWith(\".0\") || latStr.endsWith(\".5\") || lngStr.endsWith(\".5\");\n                }).length,\n                duplicateNames: findDuplicates(properties, \"name\"),\n                duplicateAddresses: findDuplicates(properties, \"address\"),\n                testProperties: properties.filter((p)=>p.name && p.name.toLowerCase().includes(\"test\") || p.name && p.name.toLowerCase().includes(\"example\") || p.address && p.address.toLowerCase().includes(\"test\") || p._is_test_property).length\n            };\n            const totalIssues = dataIssues.missingNames + dataIssues.incompleteAddresses + dataIssues.suspiciousZeros + dataIssues.suspiciousCoordinates + dataIssues.duplicateNames.length + dataIssues.duplicateAddresses.length + dataIssues.testProperties;\n            // No issues found\n            if (totalIssues === 0) {\n                alert(\"No data issues found that need cleaning\");\n                setLoading(false);\n                return;\n            }\n            // Confirm with user\n            const confirmation = confirm(\"Found \".concat(totalIssues, \" data quality issues:\\n\\n\") + \"- \".concat(dataIssues.missingNames, \" properties missing names\\n\") + \"- \".concat(dataIssues.incompleteAddresses, \" properties with incomplete addresses\\n\") + \"- \".concat(dataIssues.suspiciousZeros, \" properties with suspicious zero values\\n\") + \"- \".concat(dataIssues.suspiciousCoordinates, \" properties with suspicious coordinates\\n\") + \"- \".concat(dataIssues.duplicateNames.length, \" duplicate property names\\n\") + \"- \".concat(dataIssues.duplicateAddresses.length, \" duplicate addresses\\n\") + \"- \".concat(dataIssues.testProperties, \" potential test/example properties\\n\\n\") + \"Would you like to clean these issues?\");\n            if (!confirmation) {\n                setLoading(false);\n                return;\n            }\n            // Optional: offer advanced options\n            const advancedOptions = confirm(\"Would you like to use advanced cleaning options?\\n\\n\" + \"- Fix missing names and extract city/state from addresses\\n\" + \"- Flag suspicious coordinates for geocoding\\n\" + \"- Identify and flag duplicate properties\\n\" + \"- Flag test properties for filtering\\n\\n\" + \"Select 'Cancel' for basic cleaning only.\");\n            // Apply fixes to a copy of the properties\n            const cleanedProperties = [\n                ...properties\n            ];\n            // Clean property names\n            let issuesCleaned = 0;\n            properties.forEach((property, index)=>{\n                let propertyCleaned = false;\n                let cleaningNotes = [];\n                // Fix missing names using address\n                if (!property.name || property.name.trim() === \"\") {\n                    if (property.address) {\n                        cleanedProperties[index].name = \"Property at \".concat(property.address.split(\",\")[0]);\n                    } else {\n                        cleanedProperties[index].name = \"Unnamed Property \".concat(property.id.toString().substring(0, 8));\n                    }\n                    propertyCleaned = true;\n                    cleaningNotes.push(\"Missing name fixed\");\n                }\n                // Fix missing city/state if address exists\n                if (property.address && (!property.city || !property.state)) {\n                    // Try to extract city and state from address\n                    const addressParts = property.address.split(\",\").map((p)=>p.trim());\n                    if (addressParts.length >= 2 && !property.city) {\n                        cleanedProperties[index].city = addressParts[addressParts.length - 2];\n                        propertyCleaned = true;\n                        cleaningNotes.push(\"City extracted from address\");\n                    }\n                    if (addressParts.length >= 1 && !property.state) {\n                        // Try to extract state from the last part of the address\n                        const statePart = addressParts[addressParts.length - 1];\n                        const stateMatch = statePart.match(/[A-Z]{2}/);\n                        if (stateMatch) {\n                            cleanedProperties[index].state = stateMatch[0];\n                            propertyCleaned = true;\n                            cleaningNotes.push(\"State extracted from address\");\n                        }\n                    }\n                }\n                // Flag suspicious coordinates for advanced cleaning\n                if (advancedOptions) {\n                    const latStr = String(property.latitude || \"\");\n                    const lngStr = String(property.longitude || \"\");\n                    // Check for suspicious patterns in coordinates\n                    const hasLowPrecision = latStr.includes(\".\") && latStr.split(\".\")[1].length <= 2 || lngStr.includes(\".\") && lngStr.split(\".\")[1].length <= 2;\n                    const hasSuspiciousPattern = latStr === lngStr || // Same lat/lng is very unlikely\n                    latStr.endsWith(\"00000\") || lngStr.endsWith(\"00000\") || latStr.endsWith(\".0\") || lngStr.endsWith(\".0\") || latStr.endsWith(\".5\") || lngStr.endsWith(\".5\");\n                    if (hasLowPrecision || hasSuspiciousPattern) {\n                        cleanedProperties[index]._is_grid_pattern = true;\n                        cleanedProperties[index]._needs_geocoding = true;\n                        propertyCleaned = true;\n                        cleaningNotes.push(\"Flagged suspicious coordinates for geocoding\");\n                    }\n                }\n                // Flag test properties\n                if (property.name && property.name.toLowerCase().includes(\"test\") || property.name && property.name.toLowerCase().includes(\"example\") || property.address && property.address.toLowerCase().includes(\"test\")) {\n                    cleanedProperties[index]._is_test_property = true;\n                    propertyCleaned = true;\n                    cleaningNotes.push(\"Flagged as test property\");\n                }\n                // Flag suspicious zeros for advanced cleaning\n                if (advancedOptions && (property.price === 0 || property.units === 0 || property.num_units === 0)) {\n                    // We'll just flag these for now, manual review is needed\n                    if (!cleanedProperties[index]._data_quality_issues) {\n                        cleanedProperties[index]._data_quality_issues = [];\n                    }\n                    if (property.price === 0) {\n                        cleanedProperties[index]._data_quality_issues.push(\"zero_price\");\n                        propertyCleaned = true;\n                        cleaningNotes.push(\"Flagged zero price\");\n                    }\n                    if (property.units === 0 || property.num_units === 0) {\n                        cleanedProperties[index]._data_quality_issues.push(\"zero_units\");\n                        propertyCleaned = true;\n                        cleaningNotes.push(\"Flagged zero units\");\n                    }\n                }\n                // Update property with cleaning information\n                if (propertyCleaned) {\n                    cleanedProperties[index]._data_cleaned = true;\n                    cleanedProperties[index]._cleaning_notes = cleaningNotes.join(\", \");\n                    issuesCleaned++;\n                }\n            });\n            // Update state with cleaned properties\n            setProperties(cleanedProperties);\n            calculateStats(cleanedProperties);\n            // Alert user of results\n            alert(\"Data cleaning complete!\\n\\n\" + \"- \".concat(issuesCleaned, \" properties were cleaned\\n\") + \"- Added names to \".concat(dataIssues.missingNames, \" properties\\n\") + \"- Extracted city/state for \".concat(dataIssues.incompleteAddresses, \" properties\\n\") + \"- Flagged \".concat(dataIssues.suspiciousCoordinates, \" suspicious coordinates for geocoding\\n\") + \"- Identified \".concat(dataIssues.duplicateNames.length, \" duplicate names\\n\") + \"- Flagged \".concat(dataIssues.testProperties, \" test properties\\n\\n\") + \"Next steps:\\n\" + '1. Use \"Batch Geocode\" to fix flagged coordinates\\n' + '2. Use \"Properties Analysis\" to review data quality\\n' + \"3. Some properties still require manual review\");\n        } catch (error) {\n            console.error(\"Error cleaning property data:\", error);\n            alert(\"Error cleaning data: \".concat(error.message));\n        } finally{\n            setLoading(false);\n        }\n    }\n    // Helper function to find duplicates in properties by field\n    function findDuplicates(array, key) {\n        const counts = {};\n        const duplicates = [];\n        // Skip entries with empty values\n        array.forEach((item)=>{\n            if (item[key] && item[key].trim() !== \"\") {\n                const value = item[key].toLowerCase().trim();\n                counts[value] = (counts[value] || 0) + 1;\n            }\n        });\n        // Find values that appear more than once\n        Object.keys(counts).forEach((value)=>{\n            if (counts[value] > 1) {\n                duplicates.push({\n                    value,\n                    count: counts[value]\n                });\n            }\n        });\n        return duplicates;\n    }\n    // Function to enrich property data with zero values\n    async function enrichPropertyData() {\n        try {\n            setLoading(true);\n            // Identify properties with suspicious zero values\n            const suspiciousProperties = properties.filter((p)=>p.price === 0 || p.units === 0 || p.num_units === 0);\n            if (suspiciousProperties.length === 0) {\n                alert(\"No properties with suspicious zero values found\");\n                setLoading(false);\n                return;\n            }\n            // Confirm with user\n            const confirmation = confirm(\"Found \".concat(suspiciousProperties.length, \" properties with suspicious zero values:\\n\\n\") + \"- \".concat(suspiciousProperties.filter((p)=>p.price === 0).length, \" properties with zero price\\n\") + \"- \".concat(suspiciousProperties.filter((p)=>p.units === 0 || p.num_units === 0).length, \" properties with zero units\\n\\n\") + \"Would you like to attempt to enrich these properties?\");\n            if (!confirmation) {\n                setLoading(false);\n                return;\n            }\n            // Make a copy of the properties for enrichment\n            const enrichedProperties = [\n                ...properties\n            ];\n            let enrichedCount = 0;\n            // Analyze collections of similar properties to derive estimates\n            // Group properties by city/state for better comparison\n            const cityStateGroups = {};\n            properties.forEach((p)=>{\n                if (p.city && p.state && p.price && p.price > 0 && (p.units > 0 || p.num_units > 0)) {\n                    const key = \"\".concat(p.city.toLowerCase(), \",\").concat(p.state.toLowerCase());\n                    if (!cityStateGroups[key]) {\n                        cityStateGroups[key] = [];\n                    }\n                    cityStateGroups[key].push(p);\n                }\n            });\n            // Calculate median values per city/state\n            const medianValues = {};\n            Object.keys(cityStateGroups).forEach((key)=>{\n                const group = cityStateGroups[key];\n                if (group.length >= 3) {\n                    // Calculate median price per unit\n                    const pricesPerUnit = group.map((p)=>{\n                        const units = p.units || p.num_units || 0;\n                        return units > 0 ? p.price / units : 0;\n                    }).filter((v)=>v > 0).sort((a, b)=>a - b);\n                    const medianPricePerUnit = pricesPerUnit[Math.floor(pricesPerUnit.length / 2)];\n                    // Calculate median year built\n                    const yearBuilt = group.map((p)=>p.year_built).filter((y)=>y && y > 1900).sort((a, b)=>a - b);\n                    const medianYearBuilt = yearBuilt.length > 0 ? yearBuilt[Math.floor(yearBuilt.length / 2)] : null;\n                    medianValues[key] = {\n                        medianPricePerUnit,\n                        medianYearBuilt,\n                        sampleSize: group.length\n                    };\n                }\n            });\n            // Enrich properties with suspicious zero values\n            suspiciousProperties.forEach((property)=>{\n                const index = enrichedProperties.findIndex((p)=>p.id === property.id);\n                if (index === -1) return;\n                let isEnriched = false;\n                let enrichmentNotes = [];\n                // Find the best reference group for this property\n                let referenceGroup = null;\n                let referenceKey = null;\n                if (property.city && property.state) {\n                    const key = \"\".concat(property.city.toLowerCase(), \",\").concat(property.state.toLowerCase());\n                    if (medianValues[key]) {\n                        referenceGroup = medianValues[key];\n                        referenceKey = key;\n                    }\n                }\n                // If no direct city/state match, use the closest geographically or a general average\n                if (!referenceGroup) {\n                    // Fall back to state-level data or general average\n                    if (property.state) {\n                        const stateGroups = Object.keys(medianValues).filter((key)=>key.endsWith(\",\".concat(property.state.toLowerCase())));\n                        if (stateGroups.length > 0) {\n                            // Use the largest sample from the state\n                            referenceKey = stateGroups.sort((a, b)=>medianValues[b].sampleSize - medianValues[a].sampleSize)[0];\n                            referenceGroup = medianValues[referenceKey];\n                        }\n                    }\n                    // If still no match, use the overall average\n                    if (!referenceGroup) {\n                        const allPricesPerUnit = properties.filter((p)=>p.price && p.price > 0 && (p.units > 0 || p.num_units > 0)).map((p)=>p.price / (p.units || p.num_units)).sort((a, b)=>a - b);\n                        if (allPricesPerUnit.length > 0) {\n                            referenceGroup = {\n                                medianPricePerUnit: allPricesPerUnit[Math.floor(allPricesPerUnit.length / 2)],\n                                medianYearBuilt: null,\n                                sampleSize: allPricesPerUnit.length\n                            };\n                            referenceKey = \"all_properties\";\n                        }\n                    }\n                }\n                // Calculate missing values\n                if (referenceGroup) {\n                    // Fix zero price if units are available\n                    if (property.price === 0 && (property.units > 0 || property.num_units > 0)) {\n                        const units = property.units || property.num_units;\n                        enrichedProperties[index].price = Math.round(referenceGroup.medianPricePerUnit * units);\n                        isEnriched = true;\n                        enrichmentNotes.push(\"Estimated price based on \".concat(referenceKey, \" median ($\").concat(Math.round(referenceGroup.medianPricePerUnit).toLocaleString(), \"/unit)\"));\n                    }\n                    // Fix zero units if price is available\n                    if ((property.units === 0 || !property.units) && (property.num_units === 0 || !property.num_units) && property.price > 0 && referenceGroup.medianPricePerUnit > 0) {\n                        const estimatedUnits = Math.round(property.price / referenceGroup.medianPricePerUnit);\n                        enrichedProperties[index].units = estimatedUnits;\n                        enrichedProperties[index].num_units = estimatedUnits;\n                        isEnriched = true;\n                        enrichmentNotes.push(\"Estimated \".concat(estimatedUnits, \" units based on price and \").concat(referenceKey, \" median\"));\n                    }\n                    // Add missing year built if we have a reference\n                    if ((!property.year_built || property.year_built < 1900) && referenceGroup.medianYearBuilt) {\n                        enrichedProperties[index].year_built = referenceGroup.medianYearBuilt;\n                        isEnriched = true;\n                        enrichmentNotes.push(\"Estimated year built as \".concat(referenceGroup.medianYearBuilt, \" based on \").concat(referenceKey, \" median\"));\n                    }\n                }\n                // Flag property as needing human review if we couldn't enrich it\n                if (!isEnriched) {\n                    // Mark as needing manual review\n                    if (!enrichedProperties[index]._data_quality_issues) {\n                        enrichedProperties[index]._data_quality_issues = [];\n                    }\n                    enrichedProperties[index]._data_quality_issues.push(\"needs_manual_review\");\n                    isEnriched = true;\n                    enrichmentNotes.push(\"Marked for manual review - insufficient data to make estimates\");\n                }\n                // Update property with enrichment information\n                if (isEnriched) {\n                    enrichedProperties[index]._data_enriched = true;\n                    enrichedProperties[index]._enrichment_notes = enrichmentNotes.join(\", \");\n                    enrichedCount++;\n                }\n            });\n            // Update state with enriched properties\n            setProperties(enrichedProperties);\n            calculateStats(enrichedProperties);\n            // Alert user of results\n            alert(\"Data enrichment complete!\\n\\n\" + \"- \".concat(enrichedCount, \" properties were enriched or marked for review\\n\") + \"- \".concat(suspiciousProperties.filter((p)=>p.price === 0).length, \" properties with zero price processed\\n\") + \"- \".concat(suspiciousProperties.filter((p)=>p.units === 0 || p.num_units === 0).length, \" properties with zero units processed\\n\\n\") + \"Next steps:\\n\" + \"1. Review the enriched data for accuracy\\n\" + \"2. Properties marked for manual review need human attention\\n\" + '3. Use \"Properties Analysis\" to verify data quality');\n        } catch (error) {\n            console.error(\"Error enriching property data:\", error);\n            alert(\"Error enriching data: \".concat(error.message));\n        } finally{\n            setLoading(false);\n        }\n    }\n    // Function to add a log entry with timestamp\n    const addGeocodingLog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(message) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"info\";\n        const timestamp = new Date().toLocaleTimeString();\n        setGeocodingLogs((prevLogs)=>[\n                {\n                    message,\n                    timestamp,\n                    type\n                },\n                ...prevLogs.slice(0, 99) // Keep only the last 100 logs\n            ]);\n    }, []);\n    // Clear logs when starting new geocoding process\n    const clearGeocodingLogs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setGeocodingLogs([]);\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_src_components_Layout__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: \"Property Map | Austin Multifamily\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"container mx-auto px-4\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex justify-between items-center mb-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-2xl font-bold\",\n                            children: [\n                                \"Property Map \",\n                                loading ? \"(Loading...)\" : \"(\".concat(properties.length, \" properties shown)\")\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                            lineNumber: 763,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-2\",\n                            children: loading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-sm text-gray-500\",\n                                children: \"Loading properties...\"\n                            }, void 0, false, {\n                                fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                lineNumber: 769,\n                                columnNumber: 15\n                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-sm bg-white shadow-sm border border-gray-200 rounded px-3 py-1\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"font-medium\",\n                                                children: totalFetched\n                                            }, void 0, false, {\n                                                fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                                lineNumber: 773,\n                                                columnNumber: 19\n                                            }, this),\n                                            \" properties fetched\",\n                                            properties.length !== totalFetched && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"text-gray-500 ml-1\",\n                                                children: [\n                                                    \"(\",\n                                                    totalFetched - properties.length,\n                                                    \" filtered)\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                                lineNumber: 775,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                        lineNumber: 772,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-sm bg-blue-100 hover:bg-blue-200 text-blue-700 rounded px-3 py-1 transition\",\n                                        onClick: runPropertyAnalysis,\n                                        children: \"Properties Analysis\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                        lineNumber: 781,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-sm rounded px-3 py-1 transition \".concat(geocoding ? \"bg-gray-100 text-gray-500 cursor-not-allowed\" : \"bg-indigo-100 hover:bg-indigo-200 text-indigo-700\"),\n                                        onClick: batchGeocodeProperties,\n                                        disabled: geocoding,\n                                        children: geocoding ? \"Geocoding...\" : \"Batch Geocode\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                        lineNumber: 788,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-sm rounded px-3 py-1 transition \".concat(loading ? \"bg-gray-100 text-gray-500 cursor-not-allowed\" : \"bg-amber-100 hover:bg-amber-200 text-amber-700\"),\n                                        onClick: cleanPropertyData,\n                                        disabled: loading,\n                                        children: \"Clean Data\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                        lineNumber: 800,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-sm rounded px-3 py-1 transition \".concat(loading ? \"bg-gray-100 text-gray-500 cursor-not-allowed\" : \"bg-purple-100 hover:bg-purple-200 text-purple-700\"),\n                                        onClick: enrichPropertyData,\n                                        disabled: loading,\n                                        children: \"Enrich Data\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                        lineNumber: 812,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-sm bg-green-100 hover:bg-green-200 text-green-700 rounded px-3 py-1 transition\",\n                                        onClick: ()=>loadProperties(),\n                                        children: \"Refresh Map\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                                        lineNumber: 824,\n                                        columnNumber: 17\n                                    }, this)\n                                ]\n                            }, void 0, true)\n                        }, void 0, false, {\n                            fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                            lineNumber: 767,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                    lineNumber: 762,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"h-[80vh]\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MapComponent, {\n                        properties: properties,\n                        selectedProperty: selectedProperty,\n                        setSelectedProperty: setSelectedProperty,\n                        onBoundsChange: handleBoundsChange\n                    }, void 0, false, {\n                        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                        lineNumber: 836,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n                    lineNumber: 835,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n            lineNumber: 761,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/map.js\",\n        lineNumber: 760,\n        columnNumber: 5\n    }, this);\n}\n_s(MapPage, \"cjXAp6+U/cZXiYPZLymjp+NrESk=\");\n_c1 = MapPage;\nvar _c, _c1;\n$RefreshReg$(_c, \"MapComponent\");\n$RefreshReg$(_c1, \"MapPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/map.js\n"));

/***/ })

});