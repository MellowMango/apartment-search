"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/supabase.js":
/*!*************************!*\
  !*** ./lib/supabase.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTestProperty: function() { return /* binding */ createTestProperty; },\n/* harmony export */   fetchProperties: function() { return /* binding */ fetchProperties; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   signIn: function() { return /* binding */ signIn; },\n/* harmony export */   signOut: function() { return /* binding */ signOut; },\n/* harmony export */   signUp: function() { return /* binding */ signUp; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Supabase client for frontend operations\n */ \n// Get Supabase credentials from environment variables\nconst supabaseUrl = \"https://your-project-id.supabase.co\";\nconst supabaseAnonKey = \"your-anon-key\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\"Supabase credentials not found. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables.\");\n}\n// Create Supabase client\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n    }\n});\n/**\n * Get the current authenticated user\n * @returns {Promise<Object|null>} The user object or null if not authenticated\n */ const getCurrentUser = async ()=>{\n    const { data: { user } } = await supabase.auth.getUser();\n    return user;\n};\n/**\n * Sign up a new user\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise<Object>} The result of the sign up operation\n */ const signUp = async (email, password)=>{\n    return await supabase.auth.signUp({\n        email,\n        password\n    });\n};\n/**\n * Sign in a user\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise<Object>} The result of the sign in operation\n */ const signIn = async (email, password)=>{\n    return await supabase.auth.signInWithPassword({\n        email,\n        password\n    });\n};\n/**\n * Sign out the current user\n * @returns {Promise<Object>} The result of the sign out operation\n */ const signOut = async ()=>{\n    return await supabase.auth.signOut();\n};\n/**\n * Fetch properties from Supabase with enhanced error handling and data normalization\n * \n * @param {Object} options - Query options\n * @param {Object} options.filters - Key-value pairs for filtering (e.g. {status: 'For Sale'})\n * @param {number} options.page - Page number for pagination\n * @param {number} options.pageSize - Number of items per page\n * @param {string} options.sortBy - Field to sort by\n * @param {boolean} options.sortAsc - Sort in ascending order if true\n * @param {boolean} options.includeIncomplete - Whether to include properties with missing coordinates\n * @param {boolean} options.includeResearch - Whether to include enriched research data\n * @returns {Promise<Array>} Array of normalized properties\n */ const fetchProperties = async function() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Check if we should join with research data\n    if (options.includeResearch !== false) {\n        // Include research data in our query - we'll join with property_research table\n        try {\n            // Start with a query that joins properties with research data\n            let query = supabase.from(\"properties\").select(\"\\n          *,\\n          property_research:property_research(*)\\n        \");\n            // Apply filters if provided\n            if (options.filters) {\n                Object.entries(options.filters).forEach((param)=>{\n                    let [key, value] = param;\n                    if (value !== undefined && value !== null && value !== \"\") {\n                        // Handle special filter syntax\n                        if (key === \"or\") {\n                            query = query.or(value);\n                        } else if (key.endsWith(\"_gte\")) {\n                            const actualKey = key.replace(\"_gte\", \"\");\n                            query = query.gte(actualKey, value);\n                        } else if (key.endsWith(\"_lte\")) {\n                            const actualKey = key.replace(\"_lte\", \"\");\n                            query = query.lte(actualKey, value);\n                        } else if (key.endsWith(\"_gt\")) {\n                            const actualKey = key.replace(\"_gt\", \"\");\n                            query = query.gt(actualKey, value);\n                        } else if (key.endsWith(\"_lt\")) {\n                            const actualKey = key.replace(\"_lt\", \"\");\n                            query = query.lt(actualKey, value);\n                        } else if (key.endsWith(\"_ilike\")) {\n                            const actualKey = key.replace(\"_ilike\", \"\");\n                            query = query.ilike(actualKey, value);\n                        } else {\n                            // Default to equality matching\n                            query = query.eq(key, value);\n                        }\n                    }\n                });\n            }\n            // If we need complete properties with coordinates for the map\n            if (!options.includeIncomplete) {\n                // Use a more precise filter to avoid empty/zero coordinates\n                // First prioritize properties with valid coordinates (either direct or from research)\n                query = query.not(\"latitude\", \"is\", null).not(\"longitude\", \"is\", null).not(\"latitude\", \"eq\", 0).not(\"longitude\", \"eq\", 0).order(\"created_at\", {\n                    ascending: false\n                });\n                console.log(\"Querying for properties with valid coordinates only\");\n            } else {\n                console.log(\"Including all properties regardless of coordinates\");\n            }\n            // Apply pagination\n            if (options.page && options.pageSize) {\n                const start = (options.page - 1) * options.pageSize;\n                const end = start + options.pageSize - 1;\n                query = query.range(start, end);\n            }\n            // Apply sorting\n            if (options.sortBy) {\n                query = query.order(options.sortBy, {\n                    ascending: options.sortAsc !== false\n                });\n            }\n            // Execute query\n            const { data, error } = await query;\n            if (error) {\n                // If this fails, we'll fall back to the non-join query\n                console.warn(\"Error fetching properties with research join:\", error);\n            // Continue to fallback query below\n            } else if (data && data.length > 0) {\n                console.log(\"Found \".concat(data.length, \" properties with research data\"));\n                // Merge research data with property data\n                const normalizedProperties = data.map((property)=>{\n                    // Extract research data if available\n                    const researchData = property.property_research && property.property_research.length > 0 ? property.property_research[0] : null;\n                    // Delete the nested property_research to avoid confusion\n                    delete property.property_research;\n                    // Normalize the property\n                    const normalizedProperty = normalizeProperty(property);\n                    // If we have research data with valid coordinates, use them\n                    if (researchData && researchData.modules) {\n                        try {\n                            // Check for valid coordinates in property_details module\n                            const propertyDetails = researchData.modules.property_details || {};\n                            // Only use research coordinates if they're valid and property doesn't have them\n                            if (propertyDetails.latitude && propertyDetails.longitude && typeof propertyDetails.latitude === \"number\" && typeof propertyDetails.longitude === \"number\" && !normalizedProperty._is_grid_pattern) {\n                                normalizedProperty.latitude = propertyDetails.latitude;\n                                normalizedProperty.longitude = propertyDetails.longitude;\n                                normalizedProperty._coordinates_from_research = true;\n                                normalizedProperty._coordinates_missing = false;\n                                normalizedProperty._needs_geocoding = false;\n                                console.log(\"Using research coordinates for property \".concat(property.id, \": [\").concat(propertyDetails.latitude, \", \").concat(propertyDetails.longitude, \"]\"));\n                            }\n                            // Add research data to property\n                            normalizedProperty._research = {\n                                depth: researchData.research_depth,\n                                date: researchData.research_date,\n                                summary: researchData.executive_summary\n                            };\n                        } catch (e) {\n                            console.error(\"Error processing research data:\", e);\n                        }\n                    }\n                    return normalizedProperty;\n                });\n                // For map view, filter out properties without valid coordinates\n                if (!options.includeIncomplete) {\n                    const propertiesWithCoordinates = normalizedProperties.filter((p)=>p.latitude && p.longitude && (p._coordinates_from_research || !p._coordinates_missing && !p._is_grid_pattern));\n                    console.log(\"Filtered to \".concat(propertiesWithCoordinates.length, \" properties with valid coordinates\"));\n                    if (propertiesWithCoordinates.length > 0) {\n                        return propertiesWithCoordinates;\n                    }\n                    // If all properties were filtered out, return them anyway to avoid empty map\n                    console.warn(\"All properties were filtered out for having invalid coordinates\");\n                }\n                return normalizedProperties;\n            }\n        } catch (joinError) {\n            console.error(\"Error with research join query:\", joinError);\n        // Fall back to standard query\n        }\n    }\n    // Fallback - standard query without research data\n    console.log(\"Using standard property query without research data\");\n    let query = supabase.from(\"properties\").select(\"*\");\n    // Apply filters if provided\n    if (options.filters) {\n        Object.entries(options.filters).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null && value !== \"\") {\n                // Handle special filter syntax\n                if (key === \"or\") {\n                    query = query.or(value);\n                } else if (key.endsWith(\"_gte\")) {\n                    const actualKey = key.replace(\"_gte\", \"\");\n                    query = query.gte(actualKey, value);\n                } else if (key.endsWith(\"_lte\")) {\n                    const actualKey = key.replace(\"_lte\", \"\");\n                    query = query.lte(actualKey, value);\n                } else if (key.endsWith(\"_gt\")) {\n                    const actualKey = key.replace(\"_gt\", \"\");\n                    query = query.gt(actualKey, value);\n                } else if (key.endsWith(\"_lt\")) {\n                    const actualKey = key.replace(\"_lt\", \"\");\n                    query = query.lt(actualKey, value);\n                } else if (key.endsWith(\"_ilike\")) {\n                    const actualKey = key.replace(\"_ilike\", \"\");\n                    query = query.ilike(actualKey, value);\n                } else {\n                    // Default to equality matching\n                    query = query.eq(key, value);\n                }\n            }\n        });\n    }\n    // If we need complete properties with coordinates for the map\n    if (!options.includeIncomplete) {\n        // Use a more precise filter to avoid empty/zero coordinates\n        // First prioritize properties with valid coordinates (either direct or from research)\n        query = query.not(\"latitude\", \"is\", null).not(\"longitude\", \"is\", null).not(\"latitude\", \"eq\", 0).not(\"longitude\", \"eq\", 0).order(\"created_at\", {\n            ascending: false\n        });\n        console.log(\"Querying for properties with valid coordinates only\");\n    } else {\n        console.log(\"Including all properties regardless of coordinates\");\n    }\n    // Apply pagination\n    if (options.page && options.pageSize) {\n        const start = (options.page - 1) * options.pageSize;\n        const end = start + options.pageSize - 1;\n        query = query.range(start, end);\n    }\n    // Apply sorting\n    if (options.sortBy) {\n        query = query.order(options.sortBy, {\n            ascending: options.sortAsc !== false\n        });\n    }\n    // Execute query\n    const { data, error } = await query;\n    if (error) {\n        console.error(\"Error fetching properties:\", error);\n        throw error;\n    }\n    if (!data || data.length === 0) {\n        console.warn(\"No properties found with the given criteria\");\n        return [];\n    }\n    // Normalize property data to handle inconsistencies\n    return data.map((property)=>normalizeProperty(property));\n};\n/**\n * Normalizes property data to handle inconsistent field names\n * \n * @param {Object} property - Raw property data from Supabase\n * @returns {Object} Normalized property data\n */ const normalizeProperty = (property)=>{\n    // Make copy to avoid mutating the original\n    const normalized = {\n        ...property\n    };\n    // Handle inconsistent unit field names\n    normalized.units = property.num_units || property.units || null;\n    // Use property name or derive from address if missing\n    if (!normalized.name || normalized.name.trim() === \"\") {\n        normalized.name = property.address ? \"Property at \".concat(property.address.split(\",\")[0]) : \"Property \".concat(property.id.substring(0, 8));\n    }\n    // Make sure we have status\n    normalized.status = property.status || property.property_status || \"Listed\";\n    // Check if this is likely a test property\n    normalized._is_test_property = isTestProperty(property);\n    // Add coordinate related flags\n    if (property.latitude && property.longitude && typeof property.latitude === \"number\" && typeof property.longitude === \"number\" && !(property.latitude === 0 && property.longitude === 0)) {\n        // Check if coordinates are valid (in proper lat/long ranges)\n        const isValidLatitude = property.latitude >= -90 && property.latitude <= 90;\n        const isValidLongitude = property.longitude >= -180 && property.longitude <= 180;\n        // Austin area boundaries (approximate) - helps detect obviously wrong coordinates\n        const isInAustinArea = property.latitude >= 29.5 && property.latitude <= 31.0 && property.longitude >= -98.0 && property.longitude <= -97.0;\n        // Check if coordinates are part of a grid pattern (low precision or suspicious patterns)\n        const latStr = String(property.latitude);\n        const lngStr = String(property.longitude);\n        // Only flag very low precision coordinates as suspicious (1 decimal place or less)\n        const hasLowPrecision = latStr.includes(\".\") && latStr.split(\".\")[1].length <= 1 || lngStr.includes(\".\") && lngStr.split(\".\")[1].length <= 1;\n        // Reduced set of suspicious patterns\n        const hasSuspiciousPattern = latStr === lngStr || // Same lat/lng is very unlikely\n        latStr.endsWith(\"00000\") || lngStr.endsWith(\"00000\");\n        // Keep track of whether this is detected as a grid pattern\n        const isGridPattern = hasLowPrecision || hasSuspiciousPattern;\n        // Flag coordinates as missing if they're invalid or suspicious\n        if (!isValidLatitude || !isValidLongitude || isGridPattern) {\n            normalized._coordinates_missing = true;\n            normalized._needs_geocoding = true;\n            normalized._is_grid_pattern = isGridPattern;\n            normalized._is_invalid_range = !isValidLatitude || !isValidLongitude;\n            // Debug info for invalid coordinates\n            if (!isValidLatitude || !isValidLongitude) {\n                console.warn(\"Invalid coordinate range for property \".concat(property.id, \": [\").concat(property.latitude, \", \").concat(property.longitude, \"]\"));\n            }\n        } else {\n            // Set additional flags for coordinates outside Austin (might be valid but suspicious)\n            normalized._outside_austin = !isInAustinArea;\n            normalized._coordinates_missing = false;\n            normalized._needs_geocoding = false;\n        }\n    } else {\n        // No coordinates or invalid coordinates\n        normalized._coordinates_missing = true;\n        normalized._needs_geocoding = true;\n    }\n    return normalized;\n};\n/**\n * Determines if a property is likely a test/example property\n * \n * @param {Object} property - Property data to check\n * @returns {boolean} True if property is likely a test property\n */ const isTestProperty = (property)=>{\n    // Check for common test property indicators in name\n    const name = (property.name || \"\").toLowerCase();\n    const testIndicators = [\n        \"test\",\n        \"example\",\n        \"sample\",\n        \"demo\",\n        \"dummy\",\n        \"template\"\n    ];\n    for (const indicator of testIndicators){\n        if (name.includes(indicator)) {\n            return true;\n        }\n    }\n    // Check for unrealistic values\n    if (property.price === 0 || property.price === 1) {\n        return true;\n    }\n    if (property.units === 0 || property.units === 999 || property.num_units === 0 || property.num_units === 999) {\n        return true;\n    }\n    // Check for placeholder addresses\n    const address = (property.address || \"\").toLowerCase();\n    const placeholderIndicators = [\n        \"123 main\",\n        \"test address\",\n        \"example\",\n        \"placeholder\"\n    ];\n    for (const indicator of placeholderIndicators){\n        if (address.includes(indicator)) {\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * Creates a test property in the database for testing purposes\n * Use this to verify the database connection is working\n * \n * @returns {Promise<Object>} The created test property\n */ const createTestProperty = async ()=>{\n    // First, check if we can get the table structure\n    try {\n        // Try to get one record to see the schema\n        const { data: sampleProperty, error: sampleError } = await supabase.from(\"properties\").select(\"*\").limit(1);\n        // Basic test property that matches the schema from supabase-setup.md\n        const baseTestProperty = {\n            name: \"Test Property \".concat(new Date().toISOString().slice(0, 16)),\n            address: \"123 Test Street\",\n            city: \"Austin\",\n            state: \"TX\",\n            zip_code: \"78701\",\n            latitude: 30.2672,\n            longitude: -97.7431,\n            price: 5000000,\n            units: 50,\n            year_built: 2010,\n            property_type: \"MULTIFAMILY\",\n            status: \"available\",\n            description: \"This is a test property created to verify database connectivity.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        // If we have a sample, adapt to its schema\n        let testProperty = baseTestProperty;\n        if (!sampleError && sampleProperty && sampleProperty.length > 0) {\n            console.log(\"Found existing property for schema reference:\", sampleProperty[0]);\n            // Adapt our test property to match the existing schema\n            const sample = sampleProperty[0];\n            // Create a new object with only the fields that exist in the sample\n            const adaptedProperty = {};\n            Object.keys(baseTestProperty).forEach((key)=>{\n                // If the field exists in the sample, use our test value\n                if (key in sample) {\n                    adaptedProperty[key] = baseTestProperty[key];\n                }\n            });\n            // Check key fields that might have different names\n            if (\"property_status\" in sample && !(\"status\" in sample)) {\n                adaptedProperty.property_status = baseTestProperty.status;\n                delete adaptedProperty.status;\n            }\n            if (\"num_units\" in sample && !(\"units\" in sample)) {\n                adaptedProperty.num_units = baseTestProperty.units;\n                delete adaptedProperty.units;\n            }\n            // Use the adapted property\n            testProperty = adaptedProperty;\n            console.log(\"Adapted test property to match schema:\", testProperty);\n        } else {\n            console.log(\"No sample property found, using default schema\");\n        }\n        // Try to insert the test property\n        const { data, error } = await supabase.from(\"properties\").insert(testProperty).select();\n        if (error) {\n            console.error(\"Error creating test property:\", error);\n            // Try again with minimal fields if this failed\n            if (error.message && (error.message.includes(\"violates not-null constraint\") || error.message.includes(\"missing\"))) {\n                console.log(\"Trying again with minimal required fields\");\n                // Try with just the bare minimum fields\n                const minimalProperty = {\n                    name: \"Test Property \".concat(new Date().toISOString().slice(0, 16)),\n                    address: \"123 Test Street\",\n                    city: \"Austin\",\n                    state: \"TX\"\n                };\n                const { data: minData, error: minError } = await supabase.from(\"properties\").insert(minimalProperty).select();\n                if (minError) {\n                    console.error(\"Error creating minimal property:\", minError);\n                    throw minError;\n                }\n                console.log(\"Successfully created minimal test property:\", minData);\n                return {\n                    data: minData,\n                    info: \"Created with minimal fields only\"\n                };\n            }\n            throw error;\n        }\n        console.log(\"Test property created:\", data);\n        return {\n            data,\n            info: \"Created with full fields\"\n        };\n    } catch (err) {\n        console.error(\"Error in createTestProperty:\", err);\n        throw err;\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (supabase);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/supabase.js\n"));

/***/ })

});