/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./lib/supabase.js":
/*!*************************!*\
  !*** ./lib/supabase.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTestProperty: () => (/* binding */ createTestProperty),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchProperties: () => (/* binding */ fetchProperties),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   signUp: () => (/* binding */ signUp),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Supabase client for frontend operations\n */ \n// Get Supabase credentials from environment variables\nconst supabaseUrl = \"https://your-project-id.supabase.co\";\nconst supabaseAnonKey = \"your-anon-key\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\"Supabase credentials not found. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables.\");\n}\n// Create Supabase client\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n    }\n});\n/**\n * Get the current authenticated user\n * @returns {Promise<Object|null>} The user object or null if not authenticated\n */ const getCurrentUser = async ()=>{\n    const { data: { user } } = await supabase.auth.getUser();\n    return user;\n};\n/**\n * Sign up a new user\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise<Object>} The result of the sign up operation\n */ const signUp = async (email, password)=>{\n    return await supabase.auth.signUp({\n        email,\n        password\n    });\n};\n/**\n * Sign in a user\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise<Object>} The result of the sign in operation\n */ const signIn = async (email, password)=>{\n    return await supabase.auth.signInWithPassword({\n        email,\n        password\n    });\n};\n/**\n * Sign out the current user\n * @returns {Promise<Object>} The result of the sign out operation\n */ const signOut = async ()=>{\n    return await supabase.auth.signOut();\n};\n/**\n * Fetch properties from Supabase with enhanced error handling and data normalization\n * \n * @param {Object} options - Query options\n * @param {Object} options.filters - Key-value pairs for filtering (e.g. {status: 'For Sale'})\n * @param {number} options.page - Page number for pagination\n * @param {number} options.pageSize - Number of items per page\n * @param {string} options.sortBy - Field to sort by\n * @param {boolean} options.sortAsc - Sort in ascending order if true\n * @param {boolean} options.includeIncomplete - Whether to include properties with missing coordinates\n * @param {boolean} options.includeResearch - Whether to include enriched research data\n * @returns {Promise<Array>} Array of normalized properties\n */ const fetchProperties = async (options = {})=>{\n    // Check if we should join with research data\n    if (options.includeResearch !== false) {\n        // Include research data in our query - we'll join with property_research table\n        try {\n            // Start with a query that joins properties with research data\n            let query = supabase.from(\"properties\").select(`\n          *,\n          property_research:property_research(*)\n        `);\n            // Apply filters if provided\n            if (options.filters) {\n                Object.entries(options.filters).forEach(([key, value])=>{\n                    if (value !== undefined && value !== null && value !== \"\") {\n                        // Handle special filter syntax\n                        if (key === \"or\") {\n                            query = query.or(value);\n                        } else if (key.endsWith(\"_gte\")) {\n                            const actualKey = key.replace(\"_gte\", \"\");\n                            query = query.gte(actualKey, value);\n                        } else if (key.endsWith(\"_lte\")) {\n                            const actualKey = key.replace(\"_lte\", \"\");\n                            query = query.lte(actualKey, value);\n                        } else if (key.endsWith(\"_gt\")) {\n                            const actualKey = key.replace(\"_gt\", \"\");\n                            query = query.gt(actualKey, value);\n                        } else if (key.endsWith(\"_lt\")) {\n                            const actualKey = key.replace(\"_lt\", \"\");\n                            query = query.lt(actualKey, value);\n                        } else if (key.endsWith(\"_ilike\")) {\n                            const actualKey = key.replace(\"_ilike\", \"\");\n                            query = query.ilike(actualKey, value);\n                        } else {\n                            // Default to equality matching\n                            query = query.eq(key, value);\n                        }\n                    }\n                });\n            }\n            // If we need complete properties with coordinates for the map\n            if (!options.includeIncomplete) {\n                // Use a more precise filter to avoid empty/zero coordinates\n                // First prioritize properties with valid coordinates (either direct or from research)\n                query = query.not(\"latitude\", \"is\", null).not(\"longitude\", \"is\", null).not(\"latitude\", \"eq\", 0).not(\"longitude\", \"eq\", 0).order(\"created_at\", {\n                    ascending: false\n                });\n                console.log(\"Querying for properties with valid coordinates only\");\n            } else {\n                console.log(\"Including all properties regardless of coordinates\");\n            }\n            // Apply pagination\n            if (options.page && options.pageSize) {\n                const start = (options.page - 1) * options.pageSize;\n                const end = start + options.pageSize - 1;\n                query = query.range(start, end);\n            }\n            // Apply sorting\n            if (options.sortBy) {\n                query = query.order(options.sortBy, {\n                    ascending: options.sortAsc !== false\n                });\n            }\n            // Execute query\n            const { data, error } = await query;\n            if (error) {\n                // If this fails, we'll fall back to the non-join query\n                console.warn(\"Error fetching properties with research join:\", error);\n            // Continue to fallback query below\n            } else if (data && data.length > 0) {\n                console.log(`Found ${data.length} properties with research data`);\n                // Merge research data with property data\n                const normalizedProperties = data.map((property)=>{\n                    // Extract research data if available\n                    const researchData = property.property_research && property.property_research.length > 0 ? property.property_research[0] : null;\n                    // Delete the nested property_research to avoid confusion\n                    delete property.property_research;\n                    // Normalize the property\n                    const normalizedProperty = normalizeProperty(property);\n                    // If we have research data with valid coordinates, use them\n                    if (researchData && researchData.modules) {\n                        try {\n                            // Check for valid coordinates in property_details module\n                            const propertyDetails = researchData.modules.property_details || {};\n                            // Only use research coordinates if they're valid and property doesn't have them\n                            if (propertyDetails.latitude && propertyDetails.longitude && typeof propertyDetails.latitude === \"number\" && typeof propertyDetails.longitude === \"number\" && !normalizedProperty._is_grid_pattern) {\n                                normalizedProperty.latitude = propertyDetails.latitude;\n                                normalizedProperty.longitude = propertyDetails.longitude;\n                                normalizedProperty._coordinates_from_research = true;\n                                normalizedProperty._coordinates_missing = false;\n                                normalizedProperty._needs_geocoding = false;\n                                console.log(`Using research coordinates for property ${property.id}: [${propertyDetails.latitude}, ${propertyDetails.longitude}]`);\n                            }\n                            // Add research data to property\n                            normalizedProperty._research = {\n                                depth: researchData.research_depth,\n                                date: researchData.research_date,\n                                summary: researchData.executive_summary\n                            };\n                        } catch (e) {\n                            console.error(\"Error processing research data:\", e);\n                        }\n                    }\n                    return normalizedProperty;\n                });\n                // For map view, filter out properties without valid coordinates\n                if (!options.includeIncomplete) {\n                    const propertiesWithCoordinates = normalizedProperties.filter((p)=>p.latitude && p.longitude && (p._coordinates_from_research || !p._coordinates_missing && !p._is_grid_pattern));\n                    console.log(`Filtered to ${propertiesWithCoordinates.length} properties with valid coordinates`);\n                    if (propertiesWithCoordinates.length > 0) {\n                        return propertiesWithCoordinates;\n                    }\n                    // If all properties were filtered out, return them anyway to avoid empty map\n                    console.warn(\"All properties were filtered out for having invalid coordinates\");\n                }\n                return normalizedProperties;\n            }\n        } catch (joinError) {\n            console.error(\"Error with research join query:\", joinError);\n        // Fall back to standard query\n        }\n    }\n    // Fallback - standard query without research data\n    console.log(\"Using standard property query without research data\");\n    let query = supabase.from(\"properties\").select(\"*\");\n    // Apply filters if provided\n    if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value])=>{\n            if (value !== undefined && value !== null && value !== \"\") {\n                // Handle special filter syntax\n                if (key === \"or\") {\n                    query = query.or(value);\n                } else if (key.endsWith(\"_gte\")) {\n                    const actualKey = key.replace(\"_gte\", \"\");\n                    query = query.gte(actualKey, value);\n                } else if (key.endsWith(\"_lte\")) {\n                    const actualKey = key.replace(\"_lte\", \"\");\n                    query = query.lte(actualKey, value);\n                } else if (key.endsWith(\"_gt\")) {\n                    const actualKey = key.replace(\"_gt\", \"\");\n                    query = query.gt(actualKey, value);\n                } else if (key.endsWith(\"_lt\")) {\n                    const actualKey = key.replace(\"_lt\", \"\");\n                    query = query.lt(actualKey, value);\n                } else if (key.endsWith(\"_ilike\")) {\n                    const actualKey = key.replace(\"_ilike\", \"\");\n                    query = query.ilike(actualKey, value);\n                } else {\n                    // Default to equality matching\n                    query = query.eq(key, value);\n                }\n            }\n        });\n    }\n    // If we need complete properties with coordinates for the map\n    if (!options.includeIncomplete) {\n        // Use a more precise filter to avoid empty/zero coordinates\n        // First prioritize properties with valid coordinates (either direct or from research)\n        query = query.not(\"latitude\", \"is\", null).not(\"longitude\", \"is\", null).not(\"latitude\", \"eq\", 0).not(\"longitude\", \"eq\", 0).order(\"created_at\", {\n            ascending: false\n        });\n        console.log(\"Querying for properties with valid coordinates only\");\n    } else {\n        console.log(\"Including all properties regardless of coordinates\");\n    }\n    // Apply pagination\n    if (options.page && options.pageSize) {\n        const start = (options.page - 1) * options.pageSize;\n        const end = start + options.pageSize - 1;\n        query = query.range(start, end);\n    }\n    // Apply sorting\n    if (options.sortBy) {\n        query = query.order(options.sortBy, {\n            ascending: options.sortAsc !== false\n        });\n    }\n    // Execute query\n    const { data, error } = await query;\n    if (error) {\n        console.error(\"Error fetching properties:\", error);\n        throw error;\n    }\n    if (!data || data.length === 0) {\n        console.warn(\"No properties found with the given criteria\");\n        return [];\n    }\n    // Normalize property data to handle inconsistencies\n    return data.map((property)=>normalizeProperty(property));\n};\n/**\n * Normalizes property data to handle inconsistent field names\n * \n * @param {Object} property - Raw property data from Supabase\n * @returns {Object} Normalized property data\n */ const normalizeProperty = (property)=>{\n    // Make copy to avoid mutating the original\n    const normalized = {\n        ...property\n    };\n    // Handle inconsistent unit field names\n    normalized.units = property.num_units || property.units || null;\n    // Use property name or derive from address if missing\n    if (!normalized.name || normalized.name.trim() === \"\") {\n        normalized.name = property.address ? `Property at ${property.address.split(\",\")[0]}` : `Property ${property.id.substring(0, 8)}`;\n    }\n    // Make sure we have status\n    normalized.status = property.status || property.property_status || \"Listed\";\n    // Check if this is likely a test property\n    normalized._is_test_property = isTestProperty(property);\n    // Add coordinate related flags\n    if (property.latitude && property.longitude && typeof property.latitude === \"number\" && typeof property.longitude === \"number\" && !(property.latitude === 0 && property.longitude === 0)) {\n        // Check if coordinates are valid (in proper lat/long ranges)\n        const isValidLatitude = property.latitude >= -90 && property.latitude <= 90;\n        const isValidLongitude = property.longitude >= -180 && property.longitude <= 180;\n        // Austin area boundaries (approximate) - helps detect obviously wrong coordinates\n        const isInAustinArea = property.latitude >= 29.5 && property.latitude <= 31.0 && property.longitude >= -98.0 && property.longitude <= -97.0;\n        // Check if coordinates are part of a grid pattern (low precision or suspicious patterns)\n        const latStr = String(property.latitude);\n        const lngStr = String(property.longitude);\n        // Only flag very low precision coordinates as suspicious (1 decimal place or less)\n        const hasLowPrecision = latStr.includes(\".\") && latStr.split(\".\")[1].length <= 1 || lngStr.includes(\".\") && lngStr.split(\".\")[1].length <= 1;\n        // Reduced set of suspicious patterns\n        const hasSuspiciousPattern = latStr === lngStr || // Same lat/lng is very unlikely\n        latStr.endsWith(\"00000\") || lngStr.endsWith(\"00000\");\n        // Keep track of whether this is detected as a grid pattern\n        const isGridPattern = hasLowPrecision || hasSuspiciousPattern;\n        // Flag coordinates as missing if they're invalid or suspicious\n        if (!isValidLatitude || !isValidLongitude || isGridPattern) {\n            normalized._coordinates_missing = true;\n            normalized._needs_geocoding = true;\n            normalized._is_grid_pattern = isGridPattern;\n            normalized._is_invalid_range = !isValidLatitude || !isValidLongitude;\n            // Debug info for invalid coordinates\n            if (!isValidLatitude || !isValidLongitude) {\n                console.warn(`Invalid coordinate range for property ${property.id}: [${property.latitude}, ${property.longitude}]`);\n            }\n        } else {\n            // Set additional flags for coordinates outside Austin (might be valid but suspicious)\n            normalized._outside_austin = !isInAustinArea;\n            normalized._coordinates_missing = false;\n            normalized._needs_geocoding = false;\n        }\n    } else {\n        // No coordinates or invalid coordinates\n        normalized._coordinates_missing = true;\n        normalized._needs_geocoding = true;\n    }\n    return normalized;\n};\n/**\n * Determines if a property is likely a test/example property\n * \n * @param {Object} property - Property data to check\n * @returns {boolean} True if property is likely a test property\n */ const isTestProperty = (property)=>{\n    // Check for common test property indicators in name\n    const name = (property.name || \"\").toLowerCase();\n    const testIndicators = [\n        \"test\",\n        \"example\",\n        \"sample\",\n        \"demo\",\n        \"dummy\",\n        \"template\"\n    ];\n    for (const indicator of testIndicators){\n        if (name.includes(indicator)) {\n            return true;\n        }\n    }\n    // Check for unrealistic values\n    if (property.price === 0 || property.price === 1) {\n        return true;\n    }\n    if (property.units === 0 || property.units === 999 || property.num_units === 0 || property.num_units === 999) {\n        return true;\n    }\n    // Check for placeholder addresses\n    const address = (property.address || \"\").toLowerCase();\n    const placeholderIndicators = [\n        \"123 main\",\n        \"test address\",\n        \"example\",\n        \"placeholder\"\n    ];\n    for (const indicator of placeholderIndicators){\n        if (address.includes(indicator)) {\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * Creates a test property in the database for testing purposes\n * Use this to verify the database connection is working\n * \n * @returns {Promise<Object>} The created test property\n */ const createTestProperty = async ()=>{\n    // First, check if we can get the table structure\n    try {\n        // Try to get one record to see the schema\n        const { data: sampleProperty, error: sampleError } = await supabase.from(\"properties\").select(\"*\").limit(1);\n        // Basic test property that matches the schema from supabase-setup.md\n        const baseTestProperty = {\n            name: `Test Property ${new Date().toISOString().slice(0, 16)}`,\n            address: \"123 Test Street\",\n            city: \"Austin\",\n            state: \"TX\",\n            zip_code: \"78701\",\n            latitude: 30.2672,\n            longitude: -97.7431,\n            price: 5000000,\n            units: 50,\n            year_built: 2010,\n            property_type: \"MULTIFAMILY\",\n            status: \"available\",\n            description: \"This is a test property created to verify database connectivity.\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        // If we have a sample, adapt to its schema\n        let testProperty = baseTestProperty;\n        if (!sampleError && sampleProperty && sampleProperty.length > 0) {\n            console.log(\"Found existing property for schema reference:\", sampleProperty[0]);\n            // Adapt our test property to match the existing schema\n            const sample = sampleProperty[0];\n            // Create a new object with only the fields that exist in the sample\n            const adaptedProperty = {};\n            Object.keys(baseTestProperty).forEach((key)=>{\n                // If the field exists in the sample, use our test value\n                if (key in sample) {\n                    adaptedProperty[key] = baseTestProperty[key];\n                }\n            });\n            // Check key fields that might have different names\n            if (\"property_status\" in sample && !(\"status\" in sample)) {\n                adaptedProperty.property_status = baseTestProperty.status;\n                delete adaptedProperty.status;\n            }\n            if (\"num_units\" in sample && !(\"units\" in sample)) {\n                adaptedProperty.num_units = baseTestProperty.units;\n                delete adaptedProperty.units;\n            }\n            // Use the adapted property\n            testProperty = adaptedProperty;\n            console.log(\"Adapted test property to match schema:\", testProperty);\n        } else {\n            console.log(\"No sample property found, using default schema\");\n        }\n        // Try to insert the test property\n        const { data, error } = await supabase.from(\"properties\").insert(testProperty).select();\n        if (error) {\n            console.error(\"Error creating test property:\", error);\n            // Try again with minimal fields if this failed\n            if (error.message && (error.message.includes(\"violates not-null constraint\") || error.message.includes(\"missing\"))) {\n                console.log(\"Trying again with minimal required fields\");\n                // Try with just the bare minimum fields\n                const minimalProperty = {\n                    name: `Test Property ${new Date().toISOString().slice(0, 16)}`,\n                    address: \"123 Test Street\",\n                    city: \"Austin\",\n                    state: \"TX\"\n                };\n                const { data: minData, error: minError } = await supabase.from(\"properties\").insert(minimalProperty).select();\n                if (minError) {\n                    console.error(\"Error creating minimal property:\", minError);\n                    throw minError;\n                }\n                console.log(\"Successfully created minimal test property:\", minData);\n                return {\n                    data: minData,\n                    info: \"Created with minimal fields only\"\n                };\n            }\n            throw error;\n        }\n        console.log(\"Test property created:\", data);\n        return {\n            data,\n            info: \"Created with full fields\"\n        };\n    } catch (err) {\n        console.error(\"Error in createTestProperty:\", err);\n        throw err;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/supabase.js\n");

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/contexts/AuthContext */ \"./src/contexts/AuthContext.js\");\n/* harmony import */ var _src_contexts_ThemeContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/contexts/ThemeContext */ \"./src/contexts/ThemeContext.tsx\");\n/* harmony import */ var _src_styles_globals_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/styles/globals.css */ \"./src/styles/globals.css\");\n/* harmony import */ var _src_styles_globals_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_src_styles_globals_css__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction MyApp({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_src_contexts_ThemeContext__WEBPACK_IMPORTED_MODULE_2__.ThemeProvider, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_src_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.AuthProvider, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/_app.js\",\n                lineNumber: 9,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/_app.js\",\n            lineNumber: 8,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/guyma/code/projects/acquire/frontend/pages/_app.js\",\n        lineNumber: 7,\n        columnNumber: 5\n    }, this);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MyApp);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFDMUI7QUFFbkMsU0FBU0UsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtJQUNyQyxxQkFDRSw4REFBQ0gscUVBQWFBO2tCQUNaLDRFQUFDRCxtRUFBWUE7c0JBQ1gsNEVBQUNHO2dCQUFXLEdBQUdDLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJaEM7QUFFQSxpRUFBZUYsS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1c3Rpbi1tdWx0aWZhbWlseS1tYXAvLi9wYWdlcy9fYXBwLmpzP2UwYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vc3JjL2NvbnRleHRzL0F1dGhDb250ZXh0JztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICcuLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JztcbmltcG9ydCAnLi4vc3JjL3N0eWxlcy9nbG9iYWxzLmNzcyc7XG5cbmZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfSkge1xuICByZXR1cm4gKFxuICAgIDxUaGVtZVByb3ZpZGVyPlxuICAgICAgPEF1dGhQcm92aWRlcj5cbiAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgICAgPC9BdXRoUHJvdmlkZXI+XG4gICAgPC9UaGVtZVByb3ZpZGVyPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBNeUFwcDsgIl0sIm5hbWVzIjpbIkF1dGhQcm92aWRlciIsIlRoZW1lUHJvdmlkZXIiLCJNeUFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.js\n");

/***/ }),

/***/ "./src/contexts/AuthContext.js":
/*!*************************************!*\
  !*** ./src/contexts/AuthContext.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthContext: () => (/* binding */ AuthContext),\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/supabase */ \"./lib/supabase.js\");\n\n\n\n// Create the auth context\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\n// Create the auth provider component\nfunction AuthProvider({ children }) {\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Check for user on initial load\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Get current session\n        const getInitialSession = async ()=>{\n            try {\n                setLoading(true);\n                // Get current user\n                const { data: { user: currentUser }, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.getUser();\n                if (error) {\n                    throw error;\n                }\n                setUser(currentUser);\n            } catch (error) {\n                console.error(\"Error getting initial session:\", error);\n                setError(error.message);\n            } finally{\n                setLoading(false);\n            }\n        };\n        getInitialSession();\n        // Set up auth state listener\n        const { data: { subscription } } = _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.onAuthStateChange((_event, session)=>{\n            setUser(session?.user || null);\n            setLoading(false);\n        });\n        // Clean up subscription on unmount\n        return ()=>{\n            subscription?.unsubscribe();\n        };\n    }, []);\n    // Login with email and password\n    const signInWithEmail = async (email, password)=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            if (error) {\n                throw error;\n            }\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error signing in:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n    };\n    // Login with Google OAuth\n    const signInWithGoogle = async ()=>{\n        try {\n            // Get the correct origin based on Supabase URL, not the current window location\n            const supabaseUrl = \"https://your-project-id.supabase.co\";\n            const appUrl = window.location.origin;\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signInWithOAuth({\n                provider: \"google\",\n                options: {\n                    redirectTo: `${appUrl}/`\n                }\n            });\n            if (error) {\n                throw error;\n            }\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error signing in with Google:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n    };\n    // Sign up with email and password\n    const signUpWithEmail = async (email, password)=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signUp({\n                email,\n                password\n            });\n            if (error) {\n                throw error;\n            }\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error signing up:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n    };\n    // Sign out\n    const signOut = async ()=>{\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signOut();\n            if (error) {\n                throw error;\n            }\n            return {\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error signing out:\", error);\n            return {\n                error\n            };\n        }\n    };\n    // Reset password\n    const resetPassword = async (email)=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.resetPasswordForEmail(email, {\n                redirectTo: `${window.location.origin}/update-password`\n            });\n            if (error) {\n                throw error;\n            }\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error resetting password:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n    };\n    // Update password\n    const updatePassword = async (password)=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.updateUser({\n                password\n            });\n            if (error) {\n                throw error;\n            }\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error updating password:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n    };\n    // Check if user is admin\n    const isAdmin = !!user; // In a real app you would check a role or permission claim\n    // Create the context value object\n    const value = {\n        user,\n        loading,\n        error,\n        signInWithEmail,\n        signInWithGoogle,\n        signUpWithEmail,\n        signOut,\n        resetPassword,\n        updatePassword,\n        isAdmin\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/guyma/code/projects/acquire/frontend/src/contexts/AuthContext.js\",\n        lineNumber: 183,\n        columnNumber: 5\n    }, this);\n}\n// Create a hook for using the auth context\nfunction useAuth() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/contexts/AuthContext.js\n");

/***/ }),

/***/ "./src/contexts/ThemeContext.tsx":
/*!***************************************!*\
  !*** ./src/contexts/ThemeContext.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThemeProvider: () => (/* binding */ ThemeProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useTheme: () => (/* binding */ useTheme)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * ThemeContext.tsx\n * Context for managing light/dark mode across the application\n * \n * This context provides:\n * - Current theme state (light/dark)\n * - Toggle function to switch between themes\n * - Automatic detection of system preference\n * - Theme persistence with localStorage\n * \n * Usage:\n * 1. Wrap your app with ThemeProvider in _app.tsx\n * 2. Use useTheme() hook in components to access theme state and toggle function\n * 3. Apply conditional classes using the isDarkMode boolean\n */ \n\nconst ThemeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst ThemeProvider = ({ children, defaultTheme = \"light\" })=>{\n    // Initialize theme from localStorage or defaultTheme\n    const [theme, setThemeState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        // Check for saved theme in localStorage\n        if (false) {}\n        return defaultTheme;\n    });\n    // Effect to apply theme to document\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (false) {}\n    }, [\n        theme\n    ]);\n    // Listen for system preference changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (false) {}\n    }, []);\n    const toggleTheme = ()=>{\n        setThemeState((prevTheme)=>prevTheme === \"light\" ? \"dark\" : \"light\");\n    };\n    const setTheme = (newTheme)=>{\n        setThemeState(newTheme);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ThemeContext.Provider, {\n        value: {\n            theme,\n            isDarkMode: theme === \"dark\",\n            toggleTheme,\n            setTheme\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/guyma/code/projects/acquire/frontend/src/contexts/ThemeContext.tsx\",\n        lineNumber: 104,\n        columnNumber: 5\n    }, undefined);\n};\nconst useTheme = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemeContext);\n    if (context === undefined) {\n        throw new Error(\"useTheme must be used within a ThemeProvider\");\n    }\n    return context;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ThemeContext);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0NBY0M7QUFFd0Y7QUFXekYsTUFBTUssNkJBQWVKLG9EQUFhQSxDQUErQks7QUFPMUQsTUFBTUMsZ0JBQThDLENBQUMsRUFDMURDLFFBQVEsRUFDUkMsZUFBZSxPQUFPLEVBQ3ZCO0lBQ0MscURBQXFEO0lBQ3JELE1BQU0sQ0FBQ0MsT0FBT0MsY0FBYyxHQUFHVCwrQ0FBUUEsQ0FBUTtRQUM3Qyx3Q0FBd0M7UUFDeEMsSUFBSSxLQUFrQixFQUFhLEVBV2xDO1FBRUQsT0FBT087SUFDVDtJQUVBLG9DQUFvQztJQUNwQ04sZ0RBQVNBLENBQUM7UUFDUixJQUFJLEtBQWtCLEVBQWEsRUFZbEM7SUFDSCxHQUFHO1FBQUNPO0tBQU07SUFFVix1Q0FBdUM7SUFDdkNQLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSSxLQUFrRCxFQUFFLEVBZXZEO0lBQ0gsR0FBRyxFQUFFO0lBRUwsTUFBTTJCLGNBQWM7UUFDbEJuQixjQUFjb0IsQ0FBQUEsWUFBY0EsY0FBYyxVQUFVLFNBQVM7SUFDL0Q7SUFFQSxNQUFNQyxXQUFXLENBQUNDO1FBQ2hCdEIsY0FBY3NCO0lBQ2hCO0lBRUEscUJBQ0UsOERBQUM1QixhQUFhNkIsUUFBUTtRQUNwQkMsT0FBTztZQUNMekI7WUFDQTBCLFlBQVkxQixVQUFVO1lBQ3RCb0I7WUFDQUU7UUFDRjtrQkFFQ3hCOzs7Ozs7QUFHUCxFQUFFO0FBRUssTUFBTTZCLFdBQVc7SUFDdEIsTUFBTUMsVUFBVWxDLGlEQUFVQSxDQUFDQztJQUUzQixJQUFJaUMsWUFBWWhDLFdBQVc7UUFDekIsTUFBTSxJQUFJaUMsTUFBTTtJQUNsQjtJQUVBLE9BQU9EO0FBQ1QsRUFBRTtBQUVGLGlFQUFlakMsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1c3Rpbi1tdWx0aWZhbWlseS1tYXAvLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0LnRzeD83ZTIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlbWVDb250ZXh0LnRzeFxuICogQ29udGV4dCBmb3IgbWFuYWdpbmcgbGlnaHQvZGFyayBtb2RlIGFjcm9zcyB0aGUgYXBwbGljYXRpb25cbiAqIFxuICogVGhpcyBjb250ZXh0IHByb3ZpZGVzOlxuICogLSBDdXJyZW50IHRoZW1lIHN0YXRlIChsaWdodC9kYXJrKVxuICogLSBUb2dnbGUgZnVuY3Rpb24gdG8gc3dpdGNoIGJldHdlZW4gdGhlbWVzXG4gKiAtIEF1dG9tYXRpYyBkZXRlY3Rpb24gb2Ygc3lzdGVtIHByZWZlcmVuY2VcbiAqIC0gVGhlbWUgcGVyc2lzdGVuY2Ugd2l0aCBsb2NhbFN0b3JhZ2VcbiAqIFxuICogVXNhZ2U6XG4gKiAxLiBXcmFwIHlvdXIgYXBwIHdpdGggVGhlbWVQcm92aWRlciBpbiBfYXBwLnRzeFxuICogMi4gVXNlIHVzZVRoZW1lKCkgaG9vayBpbiBjb21wb25lbnRzIHRvIGFjY2VzcyB0aGVtZSBzdGF0ZSBhbmQgdG9nZ2xlIGZ1bmN0aW9uXG4gKiAzLiBBcHBseSBjb25kaXRpb25hbCBjbGFzc2VzIHVzaW5nIHRoZSBpc0RhcmtNb2RlIGJvb2xlYW5cbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFRoZW1lID0gJ2xpZ2h0JyB8ICdkYXJrJztcblxuaW50ZXJmYWNlIFRoZW1lQ29udGV4dFR5cGUge1xuICB0aGVtZTogVGhlbWU7XG4gIGlzRGFya01vZGU6IGJvb2xlYW47XG4gIHRvZ2dsZVRoZW1lOiAoKSA9PiB2b2lkO1xuICBzZXRUaGVtZTogKHRoZW1lOiBUaGVtZSkgPT4gdm9pZDtcbn1cblxuY29uc3QgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxUaGVtZUNvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5pbnRlcmZhY2UgVGhlbWVQcm92aWRlclByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgZGVmYXVsdFRoZW1lPzogVGhlbWU7XG59XG5cbmV4cG9ydCBjb25zdCBUaGVtZVByb3ZpZGVyOiBSZWFjdC5GQzxUaGVtZVByb3ZpZGVyUHJvcHM+ID0gKHsgXG4gIGNoaWxkcmVuLCBcbiAgZGVmYXVsdFRoZW1lID0gJ2xpZ2h0JyBcbn0pID0+IHtcbiAgLy8gSW5pdGlhbGl6ZSB0aGVtZSBmcm9tIGxvY2FsU3RvcmFnZSBvciBkZWZhdWx0VGhlbWVcbiAgY29uc3QgW3RoZW1lLCBzZXRUaGVtZVN0YXRlXSA9IHVzZVN0YXRlPFRoZW1lPigoKSA9PiB7XG4gICAgLy8gQ2hlY2sgZm9yIHNhdmVkIHRoZW1lIGluIGxvY2FsU3RvcmFnZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2F2ZWRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpIGFzIFRoZW1lO1xuICAgICAgXG4gICAgICBpZiAoc2F2ZWRUaGVtZSkge1xuICAgICAgICByZXR1cm4gc2F2ZWRUaGVtZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgZm9yIHN5c3RlbSBwcmVmZXJlbmNlXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEgJiYgd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKS5tYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiAnZGFyayc7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBkZWZhdWx0VGhlbWU7XG4gIH0pO1xuXG4gIC8vIEVmZmVjdCB0byBhcHBseSB0aGVtZSB0byBkb2N1bWVudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gU2F2ZSB0aGVtZSB0byBsb2NhbFN0b3JhZ2VcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsIHRoZW1lKTtcbiAgICAgIFxuICAgICAgLy8gQXBwbHkgdGhlbWUgdG8gZG9jdW1lbnQgYnkgdG9nZ2xpbmcgZGFyayBjbGFzcyBvbiBodG1sIGVsZW1lbnRcbiAgICAgIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBcbiAgICAgIGlmICh0aGVtZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgIGh0bWwuY2xhc3NMaXN0LmFkZCgnZGFyaycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHRtbC5jbGFzc0xpc3QucmVtb3ZlKCdkYXJrJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbdGhlbWVdKTtcblxuICAvLyBMaXN0ZW4gZm9yIHN5c3RlbSBwcmVmZXJlbmNlIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm1hdGNoTWVkaWEpIHtcbiAgICAgIGNvbnN0IG1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpO1xuICAgICAgXG4gICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoZTogTWVkaWFRdWVyeUxpc3RFdmVudCkgPT4ge1xuICAgICAgICAvLyBPbmx5IGF1dG8tc3dpdGNoIGlmIHVzZXIgaGFzbid0IGV4cGxpY2l0bHkgY2hvc2VuIGEgdGhlbWVcbiAgICAgICAgaWYgKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKSkge1xuICAgICAgICAgIHNldFRoZW1lU3RhdGUoZS5tYXRjaGVzID8gJ2RhcmsnIDogJ2xpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIG1lZGlhUXVlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlQ2hhbmdlKTtcbiAgICAgIFxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbWVkaWFRdWVyeS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBoYW5kbGVDaGFuZ2UpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCB0b2dnbGVUaGVtZSA9ICgpID0+IHtcbiAgICBzZXRUaGVtZVN0YXRlKHByZXZUaGVtZSA9PiAocHJldlRoZW1lID09PSAnbGlnaHQnID8gJ2RhcmsnIDogJ2xpZ2h0JykpO1xuICB9O1xuXG4gIGNvbnN0IHNldFRoZW1lID0gKG5ld1RoZW1lOiBUaGVtZSkgPT4ge1xuICAgIHNldFRoZW1lU3RhdGUobmV3VGhlbWUpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFRoZW1lQ29udGV4dC5Qcm92aWRlciBcbiAgICAgIHZhbHVlPXt7IFxuICAgICAgICB0aGVtZSwgXG4gICAgICAgIGlzRGFya01vZGU6IHRoZW1lID09PSAnZGFyaycsXG4gICAgICAgIHRvZ2dsZVRoZW1lLCBcbiAgICAgICAgc2V0VGhlbWUgXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1RoZW1lQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VUaGVtZSA9ICgpOiBUaGVtZUNvbnRleHRUeXBlID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgXG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZVRoZW1lIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBUaGVtZVByb3ZpZGVyJyk7XG4gIH1cbiAgXG4gIHJldHVybiBjb250ZXh0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVDb250ZXh0OyJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNvbnRleHQiLCJUaGVtZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJUaGVtZVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJkZWZhdWx0VGhlbWUiLCJ0aGVtZSIsInNldFRoZW1lU3RhdGUiLCJzYXZlZFRoZW1lIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwic2V0SXRlbSIsImh0bWwiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIm1lZGlhUXVlcnkiLCJoYW5kbGVDaGFuZ2UiLCJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVUaGVtZSIsInByZXZUaGVtZSIsInNldFRoZW1lIiwibmV3VGhlbWUiLCJQcm92aWRlciIsInZhbHVlIiwiaXNEYXJrTW9kZSIsInVzZVRoZW1lIiwiY29udGV4dCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/contexts/ThemeContext.tsx\n");

/***/ }),

/***/ "./src/styles/globals.css":
/*!********************************!*\
  !*** ./src/styles/globals.css ***!
  \********************************/
/***/ (() => {



/***/ }),

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_app.js"));
module.exports = __webpack_exports__;

})();