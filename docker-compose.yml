version: '3.8'

services:
  # Primary MCP server using Firecrawl (recommended for production)
  mcp-firecrawl:
    image: mendableai/firecrawl-mcp-server:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    volumes:
      - mcp-firecrawl-data:/app/data
    networks:
      - acquire-network

  # Alternative MCP server using Playwright (for backup/testing)
  mcp-playwright:
    image: mcr.microsoft.com/playwright:v1.51.0-jammy
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - MOCK_MODE=false
      - ENABLE_REAL_BROWSER=true
    restart: unless-stopped
    volumes:
      - ./mcp-server:/app
      - mcp-playwright-data:/app/data
    networks:
      - acquire-network
    command: >
      bash -c "cd /app && 
      npm install express playwright && 
      node -e \"
        const express = require('express');
        const { chromium } = require('playwright');
        const app = express();
        app.use(express.json());
        
        let browser;
        let page;
        
        app.post('/page', async (req, res) => {
          try {
            if (!browser) {
              browser = await chromium.launch({ headless: true });
            }
            
            if (page) await page.close();
            
            const context = await browser.newContext();
            page = await context.newPage();
            
            const url = req.body.url;
            const timeout = req.body.timeout || 30000;
            
            console.log('Navigating to:', url);
            await page.goto(url, { timeout: timeout, waitUntil: 'networkidle' });
            
            res.json({ success: true });
          } catch (err) {
            console.error('Navigation error:', err);
            res.status(500).json({ success: false, error: err.toString() });
          }
        });
        
        app.get('/dom', async (req, res) => {
          try {
            if (!page) {
              return res.status(400).json({ error: 'No page loaded. Call /page first.' });
            }
            
            const html = await page.content();
            res.json({ html });
          } catch (err) {
            console.error('DOM error:', err);
            res.status(500).json({ error: err.toString() });
          }
        });
        
        app.post('/execute', async (req, res) => {
          try {
            if (!page) {
              return res.status(400).json({ error: 'No page loaded. Call /page first.' });
            }
            
            const script = req.body.script;
            let result;
            
            try {
              result = await page.evaluate(script);
              res.json({ result });
            } catch (evalError) {
              console.error('Script evaluation error:', evalError);
              res.status(500).json({ error: evalError.toString() });
            }
          } catch (err) {
            console.error('Execute error:', err);
            res.status(500).json({ error: err.toString() });
          }
        });
        
        app.get('/screenshot', async (req, res) => {
          try {
            if (!page) {
              return res.status(400).json({ error: 'No page loaded. Call /page first.' });
            }
            
            const screenshot = await page.screenshot({ type: 'jpeg', quality: 80 });
            const base64 = screenshot.toString('base64');
            res.json({ base64 });
          } catch (err) {
            console.error('Screenshot error:', err);
            res.status(500).json({ error: err.toString() });
          }
        });
        
        process.on('SIGINT', async () => {
          if (browser) await browser.close();
          process.exit();
        });
        
        app.listen(3001, '0.0.0.0', () => {
          console.log('MCP Playwright server running on port 3001');
        });
      \""

  # Backend API that communicates with MCP servers
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MCP_SERVER_TYPE=playwright
      - MCP_FIRECRAWL_URL=http://mcp-firecrawl:3000
      - MCP_PLAYWRIGHT_URL=http://mcp-playwright:3001
      - MCP_MAX_CONCURRENT_SESSIONS=5
      - MCP_REQUEST_TIMEOUT=120
    volumes:
      - ./backend:/app
    depends_on:
      - mcp-playwright
    networks:
      - acquire-network

networks:
  acquire-network:
    driver: bridge

volumes:
  mcp-firecrawl-data:
  mcp-playwright-data: 